{"ast":null,"code":"import { call, put } from 'typed-redux-saga';\nimport { takeEvery } from 'redux-saga/effects';\nimport { SEND_MESSAGE, sendMessagePending, sendMessageSuccess, sendMessageFailure, RECEIVE_NOTIFICATION, receiveNotificationPending, receiveNotificationFailure, receiveNotificationSuccess, DELETE_NOTIFICATION, deleteNotificationFailure, deleteNotificationPending } from '../actions/chat';\nimport { apiSendMessage, apiReceiveNotification, apiDeleteNotification } from '../../api';\nfunction sendMessage(_ref) {\n  let {\n    payload\n  } = _ref;\n  return function* () {\n    try {\n      yield put(sendMessagePending(true));\n      const {\n        idMessage\n      } = yield* call(apiSendMessage, payload.phone, payload.currentMessage, payload.userId);\n      if (idMessage) {\n        yield put(sendMessageSuccess(idMessage, payload.currentMessage, payload.phone));\n      }\n      ;\n    } catch (e) {\n      yield put(sendMessageFailure('Не удалось отправить сообщение'));\n    } finally {\n      yield put(sendMessagePending(false));\n    }\n  }();\n}\n;\nfunction receiveNotification(_ref2) {\n  let {\n    payload\n  } = _ref2;\n  return function* () {\n    try {\n      yield put(receiveNotificationPending(true));\n      const notification = yield* call(apiReceiveNotification, payload.userId);\n      console.log('notification', notification);\n      if (notification) yield put(receiveNotificationSuccess(notification));\n    } catch (e) {\n      yield put(receiveNotificationFailure('Не удалось загрузить уведомление'));\n    } finally {\n      yield put(receiveNotificationPending(false));\n    }\n  }();\n}\n;\nfunction deleteNotification(_ref3) {\n  let {\n    payload\n  } = _ref3;\n  return function* () {\n    try {\n      yield put(deleteNotificationPending(true));\n      const isMessageDeleted = yield* call(apiDeleteNotification, payload.userId, payload.receiptId, payload._);\n      console.log('isMessageDeleted', isMessageDeleted);\n    } catch (e) {\n      yield put(deleteNotificationFailure('Не удалось удалить уведомление'));\n    } finally {\n      yield put(deleteNotificationPending(false));\n    }\n  }();\n}\n;\nexport default function* chatSaga() {\n  yield takeEvery(SEND_MESSAGE, sendMessage);\n  yield takeEvery(RECEIVE_NOTIFICATION, receiveNotification);\n  yield takeEvery(DELETE_NOTIFICATION, deleteNotification);\n}","map":{"version":3,"names":["call","put","takeEvery","SEND_MESSAGE","sendMessagePending","sendMessageSuccess","sendMessageFailure","RECEIVE_NOTIFICATION","receiveNotificationPending","receiveNotificationFailure","receiveNotificationSuccess","DELETE_NOTIFICATION","deleteNotificationFailure","deleteNotificationPending","apiSendMessage","apiReceiveNotification","apiDeleteNotification","sendMessage","_ref","payload","idMessage","phone","currentMessage","userId","e","receiveNotification","_ref2","notification","console","log","deleteNotification","_ref3","isMessageDeleted","receiptId","_","chatSaga"],"sources":["/Users/valeriykasmasov/projects/green-api-test/src/redux/sagas/chat.ts"],"sourcesContent":["import { call, put } from 'typed-redux-saga';\nimport { takeEvery } from 'redux-saga/effects';\nimport { Action } from 'redux-actions';\n\nimport {\n    SEND_MESSAGE,\n    sendMessagePending,\n    sendMessageSuccess,\n    sendMessageFailure,\n    RECEIVE_NOTIFICATION,\n    receiveNotificationPending,\n    receiveNotificationFailure,\n    receiveNotificationSuccess,\n    DELETE_NOTIFICATION,\n    deleteNotificationFailure,\n    deleteNotificationPending,\n} from '../actions/chat';\nimport { TMessage } from '../../models/message';\nimport { apiSendMessage, apiReceiveNotification, apiDeleteNotification } from '../../api';\nimport { TNotificationType } from '../../models/notification';\n\nfunction* sendMessage({ payload }: Action<{ phone: string, currentMessage: TMessage, userId: string}>) {\n  try {\n    yield put(sendMessagePending(true));\n    const { idMessage } = yield* call(\n      apiSendMessage,\n      payload.phone,\n      payload.currentMessage,\n      payload.userId\n    );\n    if (idMessage) {\n        yield put(sendMessageSuccess(idMessage, payload.currentMessage, payload.phone))};\n  } catch (e) {\n      yield put(sendMessageFailure('Не удалось отправить сообщение'));\n  } finally {\n      yield put(sendMessagePending(false));\n  }\n};\n\nfunction* receiveNotification ({ payload }: Action<{ userId: string}>) {\n  try {\n    yield put(receiveNotificationPending(true));\n    const notification: TNotificationType = yield* call(apiReceiveNotification, payload.userId);\n    console.log('notification', notification)\n    if (notification) yield put(receiveNotificationSuccess(notification));\n  } catch (e) {\n    yield put(receiveNotificationFailure('Не удалось загрузить уведомление'));\n  } finally {\n    yield put(receiveNotificationPending(false));\n  }\n};\n\nfunction* deleteNotification ({ payload }: Action<{ userId: string, receiptId: number, _: undefined}>) {\n  try {\n    yield put(deleteNotificationPending(true));\n    const isMessageDeleted: {result: boolean} = yield* call(\n      apiDeleteNotification,\n      payload.userId,\n      payload.receiptId,\n      payload._\n    );\n    console.log('isMessageDeleted', isMessageDeleted);\n  } catch (e) {\n    yield put(deleteNotificationFailure('Не удалось удалить уведомление'))\n  } finally {\n    yield put (deleteNotificationPending(false));\n  }\n};\n\n\n\nexport default function* chatSaga () {\n    yield takeEvery(SEND_MESSAGE, sendMessage);\n    yield takeEvery(RECEIVE_NOTIFICATION, receiveNotification);\n    yield takeEvery(DELETE_NOTIFICATION, deleteNotification);\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}