{"ast":null,"code":"const BASE_URL = 'https://api.green-api.com/';\nasync function request(method, userId, apiMethod, userApiToken, body) {\n  const url = `${BASE_URL}waInstance${userId}/${apiMethod}/${userApiToken}`;\n  const headers = {\n    'Content-Type': 'application/json',\n    \"Access-Control-Allow-Origin\": '*'\n  };\n  return fetch(url, {\n    headers,\n    method: method,\n    mode: 'no-cors',\n    credentials: 'include',\n    body: JSON.stringify(body)\n  }).then(data => console.warn(data)).catch(error => console.error(error));\n}\nexport function sendMessage(userId, userApiToken, body) {\n  return request('POST', userId, 'SendMessage', userApiToken, body);\n}\n;\nexport function ReceiveNotification() {}\n_c = ReceiveNotification;\n;\nvar _c;\n$RefreshReg$(_c, \"ReceiveNotification\");","map":{"version":3,"names":["BASE_URL","request","method","userId","apiMethod","userApiToken","body","url","headers","fetch","mode","credentials","JSON","stringify","then","data","console","warn","catch","error","sendMessage","ReceiveNotification","_c","$RefreshReg$"],"sources":["/Users/valeriykasmasov/projects/green-api-test/src/utils/requests/requests.ts"],"sourcesContent":["const BASE_URL = 'https://api.green-api.com/';\n\ntype TBody = Record<string, string>;\n\nasync function request(\n  method: string,\n  userId: string,\n  apiMethod: string,\n  userApiToken: string,\n  body: TBody,\n  ) {\n  const url = `${BASE_URL}waInstance${userId}/${apiMethod}/${userApiToken}`\n\n  const headers = {\n    'Content-Type': 'application/json',\n    \"Access-Control-Allow-Origin\": '*',\n  }\n  return fetch(\n    url,\n    {\n      headers,\n      method: method,\n      mode: 'no-cors',\n      credentials: 'include',\n      body: JSON.stringify(body),\n    }\n  ).then(data => console.warn(data)).catch(error => console.error(error));\n}\n\nexport function sendMessage( userId: string, userApiToken: string, body: TBody ) {\n  return request('POST', userId, 'SendMessage', userApiToken, body)\n};\n\nexport function ReceiveNotification(){};\n"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,4BAA4B;AAI7C,eAAeC,OAAOA,CACpBC,MAAc,EACdC,MAAc,EACdC,SAAiB,EACjBC,YAAoB,EACpBC,IAAW,EACT;EACF,MAAMC,GAAG,GAAI,GAAEP,QAAS,aAAYG,MAAO,IAAGC,SAAU,IAAGC,YAAa,EAAC;EAEzE,MAAMG,OAAO,GAAG;IACd,cAAc,EAAE,kBAAkB;IAClC,6BAA6B,EAAE;EACjC,CAAC;EACD,OAAOC,KAAK,CACVF,GAAG,EACH;IACEC,OAAO;IACPN,MAAM,EAAEA,MAAM;IACdQ,IAAI,EAAE,SAAS;IACfC,WAAW,EAAE,SAAS;IACtBL,IAAI,EAAEM,IAAI,CAACC,SAAS,CAACP,IAAI;EAC3B,CACF,CAAC,CAACQ,IAAI,CAACC,IAAI,IAAIC,OAAO,CAACC,IAAI,CAACF,IAAI,CAAC,CAAC,CAACG,KAAK,CAACC,KAAK,IAAIH,OAAO,CAACG,KAAK,CAACA,KAAK,CAAC,CAAC;AACzE;AAEA,OAAO,SAASC,WAAWA,CAAEjB,MAAc,EAAEE,YAAoB,EAAEC,IAAW,EAAG;EAC/E,OAAOL,OAAO,CAAC,MAAM,EAAEE,MAAM,EAAE,aAAa,EAAEE,YAAY,EAAEC,IAAI,CAAC;AACnE;AAAC;AAED,OAAO,SAASe,mBAAmBA,CAAA,EAAE,CAAC;AAACC,EAAA,GAAvBD,mBAAmB;AAAI;AAAC,IAAAC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}