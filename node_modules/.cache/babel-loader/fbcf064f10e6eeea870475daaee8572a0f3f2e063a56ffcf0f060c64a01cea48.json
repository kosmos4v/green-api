{"ast":null,"code":"var _jsxFileName = \"/Users/valeriykasmasov/projects/green-api-test/src/pages/Home/Home.tsx\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useContext, useEffect, useState } from \"react\";\nimport { v4 as uuid } from 'uuid';\nimport { sendMessage, receiveNotification } from '../../utils/requests';\nimport { Input } from \"../../components/common/Input/Input\";\nimport { Button } from \"../../components/common/Button/Button\";\nimport { CurrentUserContext } from \"../../AppContext\";\nimport { MessageCard } from \"../../components/common/Message\";\nimport './Home.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst сheckPhoneInput = /^\\d+$/;\nexport const Home = () => {\n  _s();\n  var _CurrentUserContextVa, _CurrentUserContextVa2;\n  const [phone, setPhone] = useState('');\n  const [chats, setChats] = useState({});\n  const [message, setMessage] = useState({\n    messageId: '',\n    text: '',\n    timestamp: '',\n    type: undefined\n  });\n  const [currentChat, setCurrentChat] = useState();\n  const CurrentUserContextValue = useContext(CurrentUserContext);\n  const userId = CurrentUserContextValue === null || CurrentUserContextValue === void 0 ? void 0 : (_CurrentUserContextVa = CurrentUserContextValue.currentUserData) === null || _CurrentUserContextVa === void 0 ? void 0 : _CurrentUserContextVa.id;\n  const userApiToken = CurrentUserContextValue === null || CurrentUserContextValue === void 0 ? void 0 : (_CurrentUserContextVa2 = CurrentUserContextValue.currentUserData) === null || _CurrentUserContextVa2 === void 0 ? void 0 : _CurrentUserContextVa2.apiToken;\n  const handleChangePhone = useCallback((_, value) => {\n    setPhone(value);\n  }, []);\n  const handleChangeMessage = useCallback((_, value) => {\n    setMessage({\n      ...message,\n      text: value\n    });\n  }, [message]);\n  const addChat = function (phone) {\n    let chatId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    let messages = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    let messageId = arguments.length > 3 ? arguments[3] : undefined;\n    let text = arguments.length > 4 ? arguments[4] : undefined;\n    let timestamp = arguments.length > 5 ? arguments[5] : undefined;\n    let type = arguments.length > 6 ? arguments[6] : undefined;\n    setChats(prev => {\n      if (!prev[phone]) {\n        const newChat = {\n          ...prev,\n          [phone]: {\n            phone,\n            chatId,\n            messages: [...messages, {\n              messageId,\n              text,\n              timestamp,\n              type\n            }]\n          }\n        };\n        setPhone('');\n        return newChat;\n      }\n      return prev;\n    });\n  };\n  const handleClickCreateChat = useCallback(() => {\n    if (сheckPhoneInput.test(phone)) {\n      addChat(phone);\n    }\n  }, [phone]);\n  const handleClickCurrentChat = useCallback(event => {\n    setMessage({\n      messageId: '',\n      text: '',\n      timestamp: '',\n      type: undefined\n    });\n    const liElement = event.target;\n    const currentNumber = liElement.innerText;\n    setCurrentChat(chats[currentNumber]);\n  }, [chats]);\n\n  // вынести логику из компонента\n\n  const handleSendMessage = useCallback(() => {\n    const messageData = {\n      text: message.text,\n      messageId: '',\n      timestamp: new Date().getTime().toString(),\n      type: \"outgoing\"\n    };\n    const body = {\n      chatId: (currentChat === null || currentChat === void 0 ? void 0 : currentChat.phone) + '@c.us',\n      message: message.text\n    };\n    if (userId && userApiToken) {\n      sendMessage(userId, userApiToken, body).then(response => {\n        const curentMessage = currentChat === null || currentChat === void 0 ? void 0 : currentChat.messages.find(data => data.timestamp === messageData.timestamp);\n        if (curentMessage) curentMessage.messageId = response.idMessage;\n      });\n    }\n    ;\n    currentChat === null || currentChat === void 0 ? void 0 : currentChat.messages.push(messageData);\n    setMessage({\n      messageId: '',\n      timestamp: '',\n      text: '',\n      type: undefined\n    });\n  }, [currentChat, userApiToken, userId, message]);\n\n  //  вынести логику из компонента\n\n  useEffect(() => {\n    if (userId && userApiToken) receiveNotification(userId, userApiToken).then(response => {\n      if (response) {\n        const {\n          body\n        } = response;\n        const {\n          messageData,\n          senderData,\n          messageId\n        } = body;\n        const incomingPhone = senderData.sender.replace('@c.us', '');\n        const incomingChatId = senderData.chatId;\n        const incomingText = messageData.extendedTextMessageData;\n        const incomingTimestamp = body.timestamp;\n        addChat(incomingPhone, incomingChatId);\n        console.log('senderData', response.body.senderData);\n        console.log('response', response);\n        console.log('timestamp', incomingTimestamp);\n      }\n    });\n  }, [userId, userApiToken]);\n  console.log('userId', userId);\n  console.log('userApiToken', userApiToken);\n  console.log('chats', chats);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"home\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"home__chat-panel\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"home__chat-panel__header\",\n        children: [/*#__PURE__*/_jsxDEV(Input, {\n          placeholder: \"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 11 \\u0446\\u0438\\u0444\\u0440 \\u043D\\u043E\\u043C\\u0435\\u0440\\u0430 \\u0442\\u0435\\u043B\\u0435\\u0444\\u043E\\u043D\\u0430\",\n          value: phone,\n          onChange: handleChangePhone,\n          isErrorMessage: false,\n          onEnter: handleClickCreateChat\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          text: \"OK\",\n          onClick: handleClickCreateChat,\n          disabled: !phone\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"home__chat-panel__chats\",\n        children: Object.keys(chats).map(chat => /*#__PURE__*/_jsxDEV(\"li\", {\n          onClick: handleClickCurrentChat,\n          className: \"home__chat-panel__chat-card\",\n          children: [\" \", chat, \" \"]\n        }, uuid(), true, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 45\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"home__conversation-panel\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"home__conversation-panel__message-wrapper\",\n        children: currentChat === null || currentChat === void 0 ? void 0 : currentChat.messages.map(chat => /*#__PURE__*/_jsxDEV(MessageCard, {\n          type: chat.type,\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: chat.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 15\n          }, this)\n        }, uuid(), false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 48\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"home__conversation-panel__input-fields\",\n        children: [/*#__PURE__*/_jsxDEV(Input, {\n          placeholder: !currentChat ? \"Чтобы напечатать сообщение выберите чат\" : \"Введите текст сообщения\",\n          onChange: handleChangeMessage,\n          value: message.text,\n          isErrorMessage: false,\n          onEnter: handleSendMessage,\n          disabled: !currentChat\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          text: \"\\u041E\\u0442\\u043F\\u0440\\u0430\\u0432\\u0438\\u0442\\u044C\",\n          onClick: handleSendMessage,\n          disabled: !message.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 5\n  }, this);\n};\n_s(Home, \"EfP1EEZtb53cv/OaVEzSdmVXYXQ=\");\n_c = Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useCallback","useContext","useEffect","useState","v4","uuid","sendMessage","receiveNotification","Input","Button","CurrentUserContext","MessageCard","jsxDEV","_jsxDEV","сheckPhoneInput","Home","_s","_CurrentUserContextVa","_CurrentUserContextVa2","phone","setPhone","chats","setChats","message","setMessage","messageId","text","timestamp","type","undefined","currentChat","setCurrentChat","CurrentUserContextValue","userId","currentUserData","id","userApiToken","apiToken","handleChangePhone","_","value","handleChangeMessage","addChat","chatId","arguments","length","messages","prev","newChat","handleClickCreateChat","test","handleClickCurrentChat","event","liElement","target","currentNumber","innerText","handleSendMessage","messageData","Date","getTime","toString","body","then","response","curentMessage","find","data","idMessage","push","senderData","incomingPhone","sender","replace","incomingChatId","incomingText","extendedTextMessageData","incomingTimestamp","console","log","className","children","placeholder","onChange","isErrorMessage","onEnter","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","Object","keys","map","chat","_c","$RefreshReg$"],"sources":["/Users/valeriykasmasov/projects/green-api-test/src/pages/Home/Home.tsx"],"sourcesContent":["import React, { useCallback, useContext, useEffect, useState } from \"react\";\nimport {v4 as uuid} from 'uuid';\n\nimport { sendMessage, receiveNotification, deleteNotification } from '../../utils/requests';\nimport { Input } from \"../../components/common/Input/Input\";\nimport { Button } from \"../../components/common/Button/Button\";\nimport { CurrentUserContext } from \"../../AppContext\";\nimport { TChat, TChats} from '../../models/chat';\nimport { TContextValue } from \"../../models/context\";\nimport { MessageCard } from \"../../components/common/Message\";\nimport { TMessage, TMessageType } from '../../models/message'\n\nimport './Home.css'\n\nconst сheckPhoneInput = /^\\d+$/;\n\nexport const Home: React.FC = () => {\n\n  const [phone, setPhone] = useState('');\n  const [chats, setChats] = useState<TChats>({});\n  const [message, setMessage] = useState<TMessage>({ messageId: '', text: '', timestamp: '', type: undefined });\n  const [currentChat, setCurrentChat] = useState<TChat>();\n  const CurrentUserContextValue = useContext<TContextValue>(CurrentUserContext);\n\n  const userId = CurrentUserContextValue?.currentUserData?.id;\n  const userApiToken = CurrentUserContextValue?.currentUserData?.apiToken;\n\n  const handleChangePhone = useCallback((_: unknown, value: string): void => {\n      setPhone(value);\n  }, []);\n  \n  const handleChangeMessage = useCallback((_: unknown, value: string): void => {\n      setMessage({...message, text: value});\n  }, [message]);\n\n  const addChat = (\n    phone: string,\n    chatId: string = '',\n    messages: TMessage[] = [],\n    messageId: string,\n    text: string,\n    timestamp: string,\n    type: TMessageType\n  ) => {\n    setChats((prev) => {\n      if (!prev[phone]) {\n        const newChat = {...prev, [phone]: {\n          phone,\n          chatId,\n          messages: [...messages, {\n            messageId,\n            text,\n            timestamp,\n            type,\n          }]\n        }}\n        setPhone('')\n        return newChat\n      } return prev;\n      });\n  };\n\n\n  const handleClickCreateChat = useCallback((): void => {\n        if (сheckPhoneInput.test(phone)) {addChat(phone)}\n      }, [phone]);\n\n      const handleClickCurrentChat = useCallback((event: React.MouseEvent<HTMLLIElement>): void => {\n        setMessage({messageId: '', text: '', timestamp: '', type: undefined});\n        const liElement = event.target as HTMLLIElement;\n        const currentNumber = liElement.innerText;\n        setCurrentChat(chats[currentNumber]);\n      }, [chats]);\n\n      // вынести логику из компонента\n      \n      const handleSendMessage = useCallback(() => {\n        const messageData: TMessage = {\n          text: message.text,\n          messageId: '',\n          timestamp: new Date().getTime().toString(),\n          type: \"outgoing\"\n        }\n        const body = {\n          chatId: currentChat?.phone + '@c.us',\n          message: message.text,\n        };\n        if (userId && userApiToken) {\n          sendMessage(userId, userApiToken, body)\n          .then(response => {\n              const curentMessage = currentChat?.messages.find(data => data.timestamp === messageData.timestamp);\n              if (curentMessage) curentMessage.messageId = response.idMessage;\n            });\n          };\n          currentChat?.messages.push(messageData);\n          setMessage({ messageId: '', timestamp: '', text: '', type: undefined});\n        }, [currentChat, userApiToken, userId, message]);\n\n        //  вынести логику из компонента\n\n        useEffect(() => {\n        if (userId && userApiToken) receiveNotification(userId, userApiToken)\n        .then(response => {\n          if (response) {\n            const { body } = response\n            const { messageData, senderData, messageId } = body\n            const incomingPhone: string = senderData.sender.replace('@c.us', '');\n            const incomingChatId = senderData.chatId;\n            const incomingText = messageData.extendedTextMessageData\n            const incomingTimestamp = body.timestamp;\n            addChat(incomingPhone, incomingChatId)\n            console.log('senderData', response.body.senderData);\n            console.log('response', response);\n            console.log('timestamp', incomingTimestamp)\n          }\n        })\n      }, [userId, userApiToken]);\n      \n      console.log('userId', userId)\n      console.log('userApiToken', userApiToken)\n      console.log('chats', chats)\n        \n     \n  return (\n    <div className=\"home\">\n      <div className=\"home__chat-panel\">\n        <div className=\"home__chat-panel__header\">\n          <Input\n            placeholder=\"Введите 11 цифр номера телефона\"\n            value={phone}\n            onChange={handleChangePhone}\n            isErrorMessage={false}\n            onEnter={handleClickCreateChat}\n          />\n          <Button\n          text=\"OK\"\n          onClick={handleClickCreateChat}\n          disabled={!phone}\n          />\n        </div>\n        <ul className=\"home__chat-panel__chats\">\n          {Object.keys(chats).map((chat) => <li onClick={ handleClickCurrentChat} className=\"home__chat-panel__chat-card\" key={uuid()}> {chat} </li>)}\n         </ul>\n      </div>\n      <div className=\"home__conversation-panel\">\n        <div className=\"home__conversation-panel__message-wrapper\">\n          {currentChat?.messages.map((chat) => <MessageCard key={uuid()} type={chat.type}>\n              <span>{chat.text}</span>\n            </MessageCard>\n            )}\n        </div>\n        <div className=\"home__conversation-panel__input-fields\">\n          <Input\n            placeholder={!currentChat ? \"Чтобы напечатать сообщение выберите чат\" : \"Введите текст сообщения\"}\n            onChange={handleChangeMessage}\n            value={message.text}\n            isErrorMessage={false}\n            onEnter={handleSendMessage}\n            disabled={!currentChat}\n          />\n          <Button\n            text=\"Отправить\"\n            onClick={handleSendMessage}\n            disabled={!message.text}\n            />\n          </div>\n      </div>\n    </div>\n  );\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}