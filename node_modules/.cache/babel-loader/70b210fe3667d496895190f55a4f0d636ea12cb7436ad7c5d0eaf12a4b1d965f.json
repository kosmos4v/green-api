{"ast":null,"code":"const BASE_URL = \"https://api.green-api.com\";\nasync function request(method, userId, apiMethod, userApiToken, body) {\n  const url = `${BASE_URL}/waInstance${userId}/${apiMethod}/${userApiToken}`;\n  const headers = {\n    \"Content-Type\": \"application/json\",\n    \"Access-Control-Allow-Origin\": \"http://localhost:3000\",\n    \"User-Agent\": \"PostmanRuntime/7.32.2\",\n    \"Connection\": \"keep-alive\",\n    \"Accept-Encoding\": \"gzip, deflate, br\",\n    \"Accept\": \"*/*\"\n  };\n  try {\n    const response = await fetch(url, {\n      headers,\n      method,\n      mode: 'cors',\n      body: JSON.stringify(body)\n    });\n    return response.json();\n  } catch (error) {\n    return console.error(`${apiMethod} response error: `, error);\n  }\n}\nexport function sendMessage(userId, userApiToken, body) {\n  return request('POST', userId, 'sendMessage', userApiToken, body);\n}\n;\nexport function receiveNotification(userId, userApiToken) {\n  return request('GET', userId, 'receiveNotification', userApiToken);\n}\n;","map":{"version":3,"names":["BASE_URL","request","method","userId","apiMethod","userApiToken","body","url","headers","response","fetch","mode","JSON","stringify","json","error","console","sendMessage","receiveNotification"],"sources":["/Users/valeriykasmasov/projects/green-api-test/src/utils/requests/requests.ts"],"sourcesContent":["const BASE_URL = \"https://api.green-api.com\";\n\ntype TBody = Record<string, string>;\n\nasync function request(\n  method: string,\n  userId: string,\n  apiMethod: string,\n  userApiToken: string,\n  body?: TBody,\n  ) {\n\n  const url = `${BASE_URL}/waInstance${userId}/${apiMethod}/${userApiToken}`\n\n  const headers = {\n    \"Content-Type\": \"application/json\",\n    \"Access-Control-Allow-Origin\": \"http://localhost:3000\",\n    \"User-Agent\": \"PostmanRuntime/7.32.2\",\n    \"Connection\": \"keep-alive\",\n    \"Accept-Encoding\": \"gzip, deflate, br\",\n    \"Accept\": \"*/*\",\n  }\n\n  try {\n    const response = await fetch(\n      url,\n      {\n        headers,\n        method,\n        mode: 'cors',\n        body: JSON.stringify(body),\n      }\n    );\n    return response.json();\n  } catch (error) {\n    return console.error(`${apiMethod} response error: `, error);\n  }\n}\n\nexport function sendMessage(userId: string, userApiToken: string, body: TBody) {\n  return request('POST', userId, 'sendMessage', userApiToken, body)\n};\n\nexport function receiveNotification(userId: string, userApiToken: string){\n  return request('GET', userId, 'receiveNotification', userApiToken);\n};\n"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,2BAA2B;AAI5C,eAAeC,OAAOA,CACpBC,MAAc,EACdC,MAAc,EACdC,SAAiB,EACjBC,YAAoB,EACpBC,IAAY,EACV;EAEF,MAAMC,GAAG,GAAI,GAAEP,QAAS,cAAaG,MAAO,IAAGC,SAAU,IAAGC,YAAa,EAAC;EAE1E,MAAMG,OAAO,GAAG;IACd,cAAc,EAAE,kBAAkB;IAClC,6BAA6B,EAAE,uBAAuB;IACtD,YAAY,EAAE,uBAAuB;IACrC,YAAY,EAAE,YAAY;IAC1B,iBAAiB,EAAE,mBAAmB;IACtC,QAAQ,EAAE;EACZ,CAAC;EAED,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAC1BH,GAAG,EACH;MACEC,OAAO;MACPN,MAAM;MACNS,IAAI,EAAE,MAAM;MACZL,IAAI,EAAEM,IAAI,CAACC,SAAS,CAACP,IAAI;IAC3B,CACF,CAAC;IACD,OAAOG,QAAQ,CAACK,IAAI,CAAC,CAAC;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,OAAOC,OAAO,CAACD,KAAK,CAAE,GAAEX,SAAU,mBAAkB,EAAEW,KAAK,CAAC;EAC9D;AACF;AAEA,OAAO,SAASE,WAAWA,CAACd,MAAc,EAAEE,YAAoB,EAAEC,IAAW,EAAE;EAC7E,OAAOL,OAAO,CAAC,MAAM,EAAEE,MAAM,EAAE,aAAa,EAAEE,YAAY,EAAEC,IAAI,CAAC;AACnE;AAAC;AAED,OAAO,SAASY,mBAAmBA,CAACf,MAAc,EAAEE,YAAoB,EAAC;EACvE,OAAOJ,OAAO,CAAC,KAAK,EAAEE,MAAM,EAAE,qBAAqB,EAAEE,YAAY,CAAC;AACpE;AAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}