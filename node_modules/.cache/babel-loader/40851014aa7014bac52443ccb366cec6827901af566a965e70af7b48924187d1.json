{"ast":null,"code":"const BASE_URL = 'https://api.green-api.com/';\nasync function request(method, userId, apiMethod, userApiToken, body) {\n  const url = `${BASE_URL}waInstance${userId}/${apiMethod}/${userApiToken}`;\n  const headers = {\n    \"Content-Type\": \"application/json\",\n    \"Access-Control-Allow-Origin\": '*',\n    \"User-Agent\": \"PostmanRuntime/7.32.2\",\n    \"Connection\": \"keep-alive\",\n    \"Accept-Encoding\": \"gzip, deflate, br\",\n    \"Accept\": \"*/*\",\n    \"Host\": \"<calculated when request is sent>\",\n    \"Content-Length\": \"<calculated when request is sent>\"\n  };\n  const response = await fetch(url, {\n    headers,\n    method,\n    mode: 'no-cors',\n    // credentials: 'include',\n    body: JSON.stringify(body)\n  });\n  return response;\n  // .then(data => console.log(`${apiMethod} response data: `, data))\n  // .catch(error => console.error(`${apiMethod} response error: `, error));\n}\n\nexport function sendMessage(userId, userApiToken, body) {\n  return request('POST', userId, 'SendMessage', userApiToken, body);\n}\n;\nexport function receiveNotification(userId, userApiToken) {\n  return request('GET', userId, 'ReceiveNotification', userApiToken);\n}\n;","map":{"version":3,"names":["BASE_URL","request","method","userId","apiMethod","userApiToken","body","url","headers","response","fetch","mode","JSON","stringify","sendMessage","receiveNotification"],"sources":["/Users/valeriykasmasov/projects/green-api-test/src/utils/requests/requests.ts"],"sourcesContent":["const BASE_URL = 'https://api.green-api.com/';\n\ntype TBody = Record<string, string>;\n\nasync function request(\n  method: string,\n  userId: string,\n  apiMethod: string,\n  userApiToken: string,\n  body?: TBody,\n  ) {\n\n  const url = `${BASE_URL}waInstance${userId}/${apiMethod}/${userApiToken}`\n\n  const headers = {\n    \"Content-Type\": \"application/json\",\n    \"Access-Control-Allow-Origin\": '*',\n    \"User-Agent\": \"PostmanRuntime/7.32.2\",\n    \"Connection\": \"keep-alive\",\n    \"Accept-Encoding\": \"gzip, deflate, br\",\n    \"Accept\": \"*/*\",\n    \"Host\": \"<calculated when request is sent>\",\n    \"Content-Length\": \"<calculated when request is sent>\",\n  }\n\n  const response = await fetch(\n    url,\n    {\n      headers,\n      method,\n      mode: 'no-cors',\n      // credentials: 'include',\n      body: JSON.stringify(body),\n    }\n  );\n  return response;\n  // .then(data => console.log(`${apiMethod} response data: `, data))\n  // .catch(error => console.error(`${apiMethod} response error: `, error));\n}\n\nexport function sendMessage(userId: string, userApiToken: string, body: TBody) {\n  return request('POST', userId, 'SendMessage', userApiToken, body)\n};\n\nexport function receiveNotification(userId: string, userApiToken: string){\n  return request('GET', userId, 'ReceiveNotification', userApiToken);\n};\n"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,4BAA4B;AAI7C,eAAeC,OAAOA,CACpBC,MAAc,EACdC,MAAc,EACdC,SAAiB,EACjBC,YAAoB,EACpBC,IAAY,EACV;EAEF,MAAMC,GAAG,GAAI,GAAEP,QAAS,aAAYG,MAAO,IAAGC,SAAU,IAAGC,YAAa,EAAC;EAEzE,MAAMG,OAAO,GAAG;IACd,cAAc,EAAE,kBAAkB;IAClC,6BAA6B,EAAE,GAAG;IAClC,YAAY,EAAE,uBAAuB;IACrC,YAAY,EAAE,YAAY;IAC1B,iBAAiB,EAAE,mBAAmB;IACtC,QAAQ,EAAE,KAAK;IACf,MAAM,EAAE,mCAAmC;IAC3C,gBAAgB,EAAE;EACpB,CAAC;EAED,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAC1BH,GAAG,EACH;IACEC,OAAO;IACPN,MAAM;IACNS,IAAI,EAAE,SAAS;IACf;IACAL,IAAI,EAAEM,IAAI,CAACC,SAAS,CAACP,IAAI;EAC3B,CACF,CAAC;EACD,OAAOG,QAAQ;EACf;EACA;AACF;;AAEA,OAAO,SAASK,WAAWA,CAACX,MAAc,EAAEE,YAAoB,EAAEC,IAAW,EAAE;EAC7E,OAAOL,OAAO,CAAC,MAAM,EAAEE,MAAM,EAAE,aAAa,EAAEE,YAAY,EAAEC,IAAI,CAAC;AACnE;AAAC;AAED,OAAO,SAASS,mBAAmBA,CAACZ,MAAc,EAAEE,YAAoB,EAAC;EACvE,OAAOJ,OAAO,CAAC,KAAK,EAAEE,MAAM,EAAE,qBAAqB,EAAEE,YAAY,CAAC;AACpE;AAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}