{"ast":null,"code":"export const ADD_NEW_CHAT = 'ADD_NEW_CHAT';\nexport const SET_CURRENT_CHAT = 'SET_CURRENT_CHAT';\nexport const SEND_MESSAGE = 'SEND_MESSAGE';\nexport const SEND_MESSAGE_PENDING = 'SEND_MESSAGE_PENDIND';\nexport const SEND_MESSAGE_SUCCESS = 'SEND_MESSAGE_SUCCESS';\nexport const SEND_MESSAGE_FAILURE = 'SEND_MESSAGE_FAILURE';\nexport const RECEIVE_NOTIFICATION = 'RECEIVE_NOTIFICATION';\nexport const RECEIVE_NOTIFICATION_PANDING = 'RECEIVE_NOTIFICATION_PANDING';\nexport const RECEIVE_NOTIFICATION_SUCCESS = 'RECEIVE_NOTIFICATION_SUCCESS';\nexport const RECEIVE_NOTIFICATION_FAILURE = 'RECEIVE_NOTIFICATION_FAILURE';\nexport const addNewChat = phone => ({\n  type: ADD_NEW_CHAT,\n  payload: {\n    phone\n  }\n});\nexport const setCurrentChat = currentChat => ({\n  type: SET_CURRENT_CHAT,\n  payload: {\n    currentChat\n  }\n});\nexport const sendMessage = (phone, currentMessage, userId) => ({\n  type: SEND_MESSAGE,\n  payload: {\n    phone,\n    currentMessage,\n    userId\n  }\n});\nexport const sendMessagePending = isPending => ({\n  type: SEND_MESSAGE_PENDING,\n  payload: {\n    isSendMessagePending: isPending\n  }\n});\nexport const sendMessageSuccess = (id, currentMessage, phone) => ({\n  type: SEND_MESSAGE_SUCCESS,\n  payload: {\n    incomingMessageId: id,\n    currentMessage,\n    phone\n  }\n});\nexport const sendMessageFailure = error => ({\n  type: SEND_MESSAGE_FAILURE,\n  payload: {\n    error\n  }\n});\nexport const receiveNotification = () => ({\n  type: RECEIVE_NOTIFICATION\n});\nexport const receiveNotificationPanding = isPanding => ({\n  type: RECEIVE_NOTIFICATION_PANDING,\n  payload: {\n    isReceiveNotificationPanding: isPanding\n  }\n});","map":{"version":3,"names":["ADD_NEW_CHAT","SET_CURRENT_CHAT","SEND_MESSAGE","SEND_MESSAGE_PENDING","SEND_MESSAGE_SUCCESS","SEND_MESSAGE_FAILURE","RECEIVE_NOTIFICATION","RECEIVE_NOTIFICATION_PANDING","RECEIVE_NOTIFICATION_SUCCESS","RECEIVE_NOTIFICATION_FAILURE","addNewChat","phone","type","payload","setCurrentChat","currentChat","sendMessage","currentMessage","userId","sendMessagePending","isPending","isSendMessagePending","sendMessageSuccess","id","incomingMessageId","sendMessageFailure","error","receiveNotification","receiveNotificationPanding","isPanding","isReceiveNotificationPanding"],"sources":["/Users/valeriykasmasov/projects/green-api-test/src/redux/actions/chat.ts"],"sourcesContent":["import { isParameter } from \"typescript\";\nimport { TChat } from \"../../models/chat\";\nimport { TMessage } from \"../../models/message\";\n\nexport const ADD_NEW_CHAT = 'ADD_NEW_CHAT';\n\nexport const SET_CURRENT_CHAT = 'SET_CURRENT_CHAT';\n\nexport const SEND_MESSAGE = 'SEND_MESSAGE';\nexport const SEND_MESSAGE_PENDING = 'SEND_MESSAGE_PENDIND';\nexport const SEND_MESSAGE_SUCCESS = 'SEND_MESSAGE_SUCCESS';\nexport const SEND_MESSAGE_FAILURE = 'SEND_MESSAGE_FAILURE';\n\nexport const RECEIVE_NOTIFICATION = 'RECEIVE_NOTIFICATION';\nexport const RECEIVE_NOTIFICATION_PANDING = 'RECEIVE_NOTIFICATION_PANDING';\nexport const RECEIVE_NOTIFICATION_SUCCESS = 'RECEIVE_NOTIFICATION_SUCCESS';\nexport const RECEIVE_NOTIFICATION_FAILURE = 'RECEIVE_NOTIFICATION_FAILURE';\n\nexport const addNewChat = (phone: string) => ({\n  type: ADD_NEW_CHAT,\n  payload: {\n    phone,\n  }\n});\n\nexport const setCurrentChat = (currentChat: TChat) => ({\n  type: SET_CURRENT_CHAT,\n  payload: {\n    currentChat,\n  }\n});\n\nexport const sendMessage = (\n  phone: string,\n  currentMessage: TMessage,\n  userId: string,\n) => ({\n  type: SEND_MESSAGE,\n  payload: {\n    phone,\n    currentMessage,\n    userId,\n  }\n});\n\nexport const sendMessagePending = (isPending: boolean) => ({\n  type: SEND_MESSAGE_PENDING,\n  payload: {\n    isSendMessagePending: isPending,\n  }\n});\n\nexport const sendMessageSuccess = (id: string, currentMessage: TMessage, phone: string) =>({\n  type: SEND_MESSAGE_SUCCESS,\n  payload: {\n    incomingMessageId: id,\n    currentMessage,\n    phone,\n   }\n});\n\nexport const sendMessageFailure = (error: string) => ({\n    type: SEND_MESSAGE_FAILURE,\n    payload: {\n        error,\n    }\n})\n\nexport const receiveNotification = () => ({\n  type: RECEIVE_NOTIFICATION,\n});\n\nexport const receiveNotificationPanding = (isPanding: boolean) => ({\n  type: RECEIVE_NOTIFICATION_PANDING,\n  payload: {\n    isReceiveNotificationPanding: isPanding,\n  }\n});"],"mappings":"AAIA,OAAO,MAAMA,YAAY,GAAG,cAAc;AAE1C,OAAO,MAAMC,gBAAgB,GAAG,kBAAkB;AAElD,OAAO,MAAMC,YAAY,GAAG,cAAc;AAC1C,OAAO,MAAMC,oBAAoB,GAAG,sBAAsB;AAC1D,OAAO,MAAMC,oBAAoB,GAAG,sBAAsB;AAC1D,OAAO,MAAMC,oBAAoB,GAAG,sBAAsB;AAE1D,OAAO,MAAMC,oBAAoB,GAAG,sBAAsB;AAC1D,OAAO,MAAMC,4BAA4B,GAAG,8BAA8B;AAC1E,OAAO,MAAMC,4BAA4B,GAAG,8BAA8B;AAC1E,OAAO,MAAMC,4BAA4B,GAAG,8BAA8B;AAE1E,OAAO,MAAMC,UAAU,GAAIC,KAAa,KAAM;EAC5CC,IAAI,EAAEZ,YAAY;EAClBa,OAAO,EAAE;IACPF;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAMG,cAAc,GAAIC,WAAkB,KAAM;EACrDH,IAAI,EAAEX,gBAAgB;EACtBY,OAAO,EAAE;IACPE;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAMC,WAAW,GAAGA,CACzBL,KAAa,EACbM,cAAwB,EACxBC,MAAc,MACV;EACJN,IAAI,EAAEV,YAAY;EAClBW,OAAO,EAAE;IACPF,KAAK;IACLM,cAAc;IACdC;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAMC,kBAAkB,GAAIC,SAAkB,KAAM;EACzDR,IAAI,EAAET,oBAAoB;EAC1BU,OAAO,EAAE;IACPQ,oBAAoB,EAAED;EACxB;AACF,CAAC,CAAC;AAEF,OAAO,MAAME,kBAAkB,GAAGA,CAACC,EAAU,EAAEN,cAAwB,EAAEN,KAAa,MAAK;EACzFC,IAAI,EAAER,oBAAoB;EAC1BS,OAAO,EAAE;IACPW,iBAAiB,EAAED,EAAE;IACrBN,cAAc;IACdN;EACD;AACH,CAAC,CAAC;AAEF,OAAO,MAAMc,kBAAkB,GAAIC,KAAa,KAAM;EAClDd,IAAI,EAAEP,oBAAoB;EAC1BQ,OAAO,EAAE;IACLa;EACJ;AACJ,CAAC,CAAC;AAEF,OAAO,MAAMC,mBAAmB,GAAGA,CAAA,MAAO;EACxCf,IAAI,EAAEN;AACR,CAAC,CAAC;AAEF,OAAO,MAAMsB,0BAA0B,GAAIC,SAAkB,KAAM;EACjEjB,IAAI,EAAEL,4BAA4B;EAClCM,OAAO,EAAE;IACPiB,4BAA4B,EAAED;EAChC;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}