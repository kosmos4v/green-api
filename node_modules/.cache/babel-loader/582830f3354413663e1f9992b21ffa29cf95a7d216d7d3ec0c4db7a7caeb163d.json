{"ast":null,"code":"import { call, put } from 'typed-redux-saga';\nimport { takeEvery } from 'redux-saga/effects';\nimport { SEND_MESSAGE, sendMessagePending, sendMessageSuccess, sendMessageFailure, RECEIVE_NOTIFICATION, receiveNotificationPanding, receiveNotificationFailure } from '../actions/chat';\nimport { apiSendMessage, apiReceiveNotification } from '../../api';\nfunction sendMessage(_ref) {\n  let {\n    payload\n  } = _ref;\n  return function* () {\n    try {\n      yield put(sendMessagePending(true));\n      const {\n        idMessage\n      } = yield* call(apiSendMessage, payload.phone, payload.currentMessage);\n      if (idMessage) {\n        yield put(sendMessageSuccess(idMessage, payload.currentMessage, payload.phone));\n      }\n      ;\n    } catch (e) {\n      yield put(sendMessageFailure('Не удалось отправить сообщение'));\n    } finally {\n      yield put(sendMessagePending(false));\n    }\n  }();\n}\n;\nfunction* receiveNotification() {\n  try {\n    yield put(receiveNotificationPanding(true));\n    const notification = yield* call(apiReceiveNotification);\n    console.log('notification', notification);\n  } catch (e) {\n    yield put(receiveNotificationFailure('Не удалось загрузить уведомление'));\n  } finally {}\n}\n;\nexport default function* chatSaga() {\n  yield takeEvery(SEND_MESSAGE, sendMessage);\n  yield takeEvery(RECEIVE_NOTIFICATION, receiveNotification);\n}","map":{"version":3,"names":["call","put","takeEvery","SEND_MESSAGE","sendMessagePending","sendMessageSuccess","sendMessageFailure","RECEIVE_NOTIFICATION","receiveNotificationPanding","receiveNotificationFailure","apiSendMessage","apiReceiveNotification","sendMessage","_ref","payload","idMessage","phone","currentMessage","e","receiveNotification","notification","console","log","chatSaga"],"sources":["/Users/valeriykasmasov/projects/green-api-test/src/redux/sagas/chat.ts"],"sourcesContent":["import { call, put } from 'typed-redux-saga';\nimport { takeEvery } from 'redux-saga/effects';\nimport { Action } from 'redux-actions';\n\nimport {\n    SEND_MESSAGE,\n    sendMessagePending,\n    sendMessageSuccess,\n    sendMessageFailure,\n    RECEIVE_NOTIFICATION,\n    receiveNotificationPanding,\n    receiveNotificationFailure,\n} from '../actions/chat';\nimport { TMessage } from '../../models/message';\nimport { apiSendMessage, apiReceiveNotification } from '../../api';\n\nfunction* sendMessage({ payload }: Action<{ phone: string, currentMessage: TMessage}>) {\n  try {\n    yield put(sendMessagePending(true));\n    const { idMessage } = yield* call(apiSendMessage, payload.phone, payload.currentMessage);\n    if (idMessage) {\n        yield put(sendMessageSuccess(idMessage, payload.currentMessage, payload.phone))};\n  } catch (e) {\n      yield put(sendMessageFailure('Не удалось отправить сообщение'));\n  } finally {\n      yield put(sendMessagePending(false));\n  }\n};\n\nfunction* receiveNotification ():Generator {\n  try {\n    yield put(receiveNotificationPanding(true));\n    const notification = yield* call(apiReceiveNotification);\n    console.log('notification', notification)\n  } catch (e) {\n    yield put(receiveNotificationFailure('Не удалось загрузить уведомление'))\n  }finally {\n\n  }\n};\n\nexport default function* chatSaga () {\n    yield takeEvery(SEND_MESSAGE, sendMessage);\n    yield takeEvery(RECEIVE_NOTIFICATION, receiveNotification);\n}"],"mappings":"AAAA,SAASA,IAAI,EAAEC,GAAG,QAAQ,kBAAkB;AAC5C,SAASC,SAAS,QAAQ,oBAAoB;AAG9C,SACIC,YAAY,EACZC,kBAAkB,EAClBC,kBAAkB,EAClBC,kBAAkB,EAClBC,oBAAoB,EACpBC,0BAA0B,EAC1BC,0BAA0B,QACvB,iBAAiB;AAExB,SAASC,cAAc,EAAEC,sBAAsB,QAAQ,WAAW;AAElE,SAAUC,WAAWA,CAAAC,IAAA;EAAA,IAAC;IAAEC;EAA4D,CAAC,GAAAD,IAAA;EAAA,oBAAE;IACrF,IAAI;MACF,MAAMZ,GAAG,CAACG,kBAAkB,CAAC,IAAI,CAAC,CAAC;MACnC,MAAM;QAAEW;MAAU,CAAC,GAAG,OAAOf,IAAI,CAACU,cAAc,EAAEI,OAAO,CAACE,KAAK,EAAEF,OAAO,CAACG,cAAc,CAAC;MACxF,IAAIF,SAAS,EAAE;QACX,MAAMd,GAAG,CAACI,kBAAkB,CAACU,SAAS,EAAED,OAAO,CAACG,cAAc,EAAEH,OAAO,CAACE,KAAK,CAAC,CAAC;MAAA;MAAC;IACtF,CAAC,CAAC,OAAOE,CAAC,EAAE;MACR,MAAMjB,GAAG,CAACK,kBAAkB,CAAC,gCAAgC,CAAC,CAAC;IACnE,CAAC,SAAS;MACN,MAAML,GAAG,CAACG,kBAAkB,CAAC,KAAK,CAAC,CAAC;IACxC;EACF,CAAC;AAAA;AAAA;AAED,UAAUe,mBAAmBA,CAAA,EAAc;EACzC,IAAI;IACF,MAAMlB,GAAG,CAACO,0BAA0B,CAAC,IAAI,CAAC,CAAC;IAC3C,MAAMY,YAAY,GAAG,OAAOpB,IAAI,CAACW,sBAAsB,CAAC;IACxDU,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEF,YAAY,CAAC;EAC3C,CAAC,CAAC,OAAOF,CAAC,EAAE;IACV,MAAMjB,GAAG,CAACQ,0BAA0B,CAAC,kCAAkC,CAAC,CAAC;EAC3E,CAAC,SAAQ,CAET;AACF;AAAC;AAED,eAAe,UAAUc,QAAQA,CAAA,EAAI;EACjC,MAAMrB,SAAS,CAACC,YAAY,EAAES,WAAW,CAAC;EAC1C,MAAMV,SAAS,CAACK,oBAAoB,EAAEY,mBAAmB,CAAC;AAC9D"},"metadata":{},"sourceType":"module","externalDependencies":[]}