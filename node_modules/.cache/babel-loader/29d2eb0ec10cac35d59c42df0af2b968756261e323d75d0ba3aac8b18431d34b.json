{"ast":null,"code":"var _jsxFileName = \"/Users/valeriykasmasov/projects/green-api-test/src/pages/Home/Home.tsx\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Input } from \"../../components/common/Input/Input\";\nimport { Button } from \"../../components/common/Button/Button\";\nimport { sendMessage, addNewChat, setCurrentChat, receiveNotification } from \"../../redux/actions/chat\";\nimport { MessageCard } from \"../../components/common/Message\";\nimport './Home.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst сheckPhoneInput = /^\\d+$/;\nexport const Home = () => {\n  _s();\n  const dispatch = useDispatch();\n  const {\n    userId\n  } = useSelector(state => state.user);\n  const {\n    chats,\n    currentChat\n  } = useSelector(state => state.chat);\n  const [phone, setPhone] = useState('');\n  const [message, setMessage] = useState({\n    messageId: '',\n    text: '',\n    timestamp: '',\n    type: undefined\n  });\n  const handleChangePhone = useCallback((_, value) => {\n    setPhone(value);\n  }, []);\n  const handleChangeMessage = useCallback((_, value) => {\n    setMessage({\n      ...message,\n      text: value\n    });\n  }, [message]);\n\n  // вынести из компонента\n\n  // const createMessage = (\n  //   phone: string,\n  //   newMessage: TMessage,\n  //   ) => {\n  //   if (\n  //     chats[phone]\n  //   ) {\n  //     console.log(chats[phone])\n  //     chats[phone].messages = [...chats[phone].messages, newMessage];\n  //   }\n  //   else console.log('no')\n  // };\n\n  // вынести из компонент\n\n  // const createChat = (\n  //   phone: string,\n  //   chatId?: string,\n  // ) => {\n  //   setChats((prev) => {\n  //     if (!prev[phone]) {\n  //       const newChat = {...prev, [phone]: {\n  //         phone,\n  //         chatId: chatId || '',\n  //         messages: [],\n  //       }}\n  //       setPhone('')\n  //       return newChat\n  //     } return prev;\n  //     });\n  // };\n\n  const handleClickCreateChat = useCallback(() => {\n    if (сheckPhoneInput.test(phone)) {\n      if (!chats[phone]) {\n        dispatch(addNewChat(phone));\n        setPhone('');\n      }\n    }\n  }, [phone, dispatch, chats]);\n  const handleClickCurrentChat = useCallback(event => {\n    setMessage({\n      messageId: '',\n      text: '',\n      timestamp: '',\n      type: undefined\n    });\n    const liElement = event.target;\n    const currentNumber = liElement.innerText;\n    dispatch(setCurrentChat(chats[currentNumber]));\n  }, [chats, dispatch]);\n  const handleSendMessage = useCallback(() => {\n    dispatch(sendMessage(currentChat.phone, {\n      ...message,\n      timestamp: new Date().getTime().toString(),\n      type: 'outgoing'\n    }, userId));\n    setMessage({\n      messageId: '',\n      text: '',\n      timestamp: '',\n      type: undefined\n    });\n  }, [dispatch, userId, message, currentChat]);\n  useEffect(() => {\n    dispatch(receiveNotification(userId));\n  }, [dispatch, userId]);\n\n  //   useEffect(() => {\n  //   if (userId && userApiToken) receiveNotification(userId, userApiToken)\n  //   .then(response => {\n  //     if (response) {\n  //       const { body } = response;\n  //       const { messageData, senderData, messageId, typeWebhook } = body;\n  //       const incomingPhone: string = senderData?.sender.replace('@c.us', '');\n  //       const incomingChatId = senderData?.chatId;\n  //       const incomingText = messageData?.textMessageData?.textMessage \n  //       ? messageData?.textMessageData?.textMessage\n  //       : messageData?.extendedTextMessageData?.text;\n  //       const incomingTimestamp = body.timestamp;\n  //       if (typeWebhook !== 'incomingCall'){\n  //         if (!chats[incomingPhone]) createChat(incomingPhone, incomingChatId)\n  //         if (\n  //           messageData?.textMessageData?.textMessage\n  //           || messageData?.extendedTextMessageData?.text\n  //         ) createMessage(incomingPhone, {\n  //             messageId,\n  //             text: incomingText,\n  //             timestamp: incomingTimestamp,\n  //             type: 'incoming',\n  //           });\n  //         console.log('1 response', response)\n  //         deleteNotification(userId, userApiToken, undefined, response.receiptId)\n  //         .then(response => {\n  //           (receiveNotification(userId, userApiToken));\n  //         })}\n  //         if (\n  //         typeWebhook === 'incomingCall'\n  //         || !messageData?.textMessageData?.textMessage\n  //         || !messageData?.extendedTextMessageData?.text\n  //         ){\n  //           deleteNotification(userId, userApiToken, undefined, response.receiptId)\n  //         }\n  //     } \n  //      if (!response) receiveNotification(userId, userApiToken).then(response => {\n  //       console.log('one more response', response)\n  //      });\n  //   })\n  // }, [userId, userApiToken, chats]);\n  // console.log(\"chats\", chats)\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"home\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"home__chat-panel\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"home__chat-panel__header\",\n        children: [/*#__PURE__*/_jsxDEV(Input, {\n          placeholder: \"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 11 \\u0446\\u0438\\u0444\\u0440 \\u043D\\u043E\\u043C\\u0435\\u0440\\u0430 \\u0442\\u0435\\u043B\\u0435\\u0444\\u043E\\u043D\\u0430\",\n          value: phone,\n          onChange: handleChangePhone,\n          isErrorMessage: false,\n          onEnter: handleClickCreateChat\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          text: \"OK\",\n          onClick: handleClickCreateChat,\n          disabled: !phone\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"home__chat-panel__chats\",\n        children: Object.keys(chats).map(chat => /*#__PURE__*/_jsxDEV(\"li\", {\n          onClick: handleClickCurrentChat,\n          className: \"home__chat-panel__chat-card\",\n          children: [\" \", chat, \" \"]\n        }, chat, true, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 45\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"home__conversation-panel\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"home__conversation-panel__message-wrapper\",\n        children: currentChat === null || currentChat === void 0 ? void 0 : currentChat.messages.sort((max, min) => parseInt(max.timestamp) - parseInt(min.timestamp)).map(chat => /*#__PURE__*/_jsxDEV(MessageCard, {\n          type: chat.type,\n          children: chat.text\n        }, chat.timestamp, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"home__conversation-panel__input-fields\",\n        children: [/*#__PURE__*/_jsxDEV(Input, {\n          placeholder: !currentChat.phone ? \"Чтобы напечатать сообщение выберите чат\" : \"Введите текст сообщения\",\n          onChange: handleChangeMessage,\n          value: message.text,\n          isErrorMessage: false,\n          onEnter: handleSendMessage,\n          disabled: !currentChat.phone\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          text: \"\\u041E\\u0442\\u043F\\u0440\\u0430\\u0432\\u0438\\u0442\\u044C\",\n          onClick: handleSendMessage,\n          disabled: !message.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 148,\n    columnNumber: 5\n  }, this);\n};\n_s(Home, \"4V2TxMhIjUeX2OzFTeDCNNS0uok=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n_c = Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useCallback","useEffect","useState","useDispatch","useSelector","Input","Button","sendMessage","addNewChat","setCurrentChat","receiveNotification","MessageCard","jsxDEV","_jsxDEV","сheckPhoneInput","Home","_s","dispatch","userId","state","user","chats","currentChat","chat","phone","setPhone","message","setMessage","messageId","text","timestamp","type","undefined","handleChangePhone","_","value","handleChangeMessage","handleClickCreateChat","test","handleClickCurrentChat","event","liElement","target","currentNumber","innerText","handleSendMessage","Date","getTime","toString","className","children","placeholder","onChange","isErrorMessage","onEnter","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","Object","keys","map","messages","sort","max","min","parseInt","_c","$RefreshReg$"],"sources":["/Users/valeriykasmasov/projects/green-api-test/src/pages/Home/Home.tsx"],"sourcesContent":["import React, {\n  useCallback,\n  useEffect,\n  useState\n} from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { Input } from \"../../components/common/Input/Input\";\nimport { Button } from \"../../components/common/Button/Button\";\nimport {\n  sendMessage,\n  addNewChat,\n  setCurrentChat,\n  receiveNotification,\n} from \"../../redux/actions/chat\";\nimport { MessageCard } from \"../../components/common/Message\";\nimport { TMessage } from '../../models/message'\nimport { TRootState } from \"../../redux/reducers\";\n\nimport './Home.scss'\n\nconst сheckPhoneInput = /^\\d+$/;\n\nexport const Home: React.FC = () => {\n\n  const dispatch = useDispatch();\n  const { userId } = useSelector((state: TRootState) => state.user);\n  const { chats, currentChat } = useSelector((state: TRootState) => state.chat);\n  const [phone, setPhone] = useState('');\n  const [message, setMessage] = useState<TMessage>({ messageId: '', text: '', timestamp: '', type: undefined });\n\n  const handleChangePhone = useCallback((_: unknown, value: string): void => {\n      setPhone(value);\n  }, []);\n  \n  const handleChangeMessage = useCallback((_: unknown, value: string): void => {\n      setMessage({...message, text: value});\n  }, [message]);\n\n  // вынести из компонента\n  \n  // const createMessage = (\n  //   phone: string,\n  //   newMessage: TMessage,\n  //   ) => {\n  //   if (\n  //     chats[phone]\n  //   ) {\n  //     console.log(chats[phone])\n  //     chats[phone].messages = [...chats[phone].messages, newMessage];\n  //   }\n  //   else console.log('no')\n  // };\n\n  // вынести из компонент\n\n  // const createChat = (\n  //   phone: string,\n  //   chatId?: string,\n  // ) => {\n  //   setChats((prev) => {\n  //     if (!prev[phone]) {\n  //       const newChat = {...prev, [phone]: {\n  //         phone,\n  //         chatId: chatId || '',\n  //         messages: [],\n  //       }}\n  //       setPhone('')\n  //       return newChat\n  //     } return prev;\n  //     });\n  // };\n\n  const handleClickCreateChat = useCallback((): void => {\n        if (сheckPhoneInput.test(phone)) {\n          if (!chats[phone]) {\n            dispatch(addNewChat(phone));\n            setPhone('');\n          }\n        }\n      }, [phone, dispatch, chats]);\n\n      const handleClickCurrentChat = useCallback((event: React.MouseEvent<HTMLLIElement>): void => {\n        setMessage({ messageId: '', text: '', timestamp: '', type: undefined });\n        const liElement = event.target as HTMLLIElement;\n        const currentNumber = liElement.innerText;\n        dispatch(setCurrentChat(chats[currentNumber]));\n      }, [chats, dispatch]);\n      \n      const handleSendMessage = useCallback(() => {\n        dispatch(sendMessage(\n          currentChat.phone,\n          {...message, timestamp: new Date().getTime().toString(), type: 'outgoing'},\n          userId,\n        )); \n        setMessage({ messageId: '', text: '', timestamp: '', type: undefined });\n      }, [dispatch, userId, message, currentChat]);\n\n      useEffect(() => {\n        dispatch(receiveNotification(userId));\n      }, [dispatch, userId]);\n\n\n      //   useEffect(() => {\n      //   if (userId && userApiToken) receiveNotification(userId, userApiToken)\n      //   .then(response => {\n      //     if (response) {\n      //       const { body } = response;\n      //       const { messageData, senderData, messageId, typeWebhook } = body;\n      //       const incomingPhone: string = senderData?.sender.replace('@c.us', '');\n      //       const incomingChatId = senderData?.chatId;\n      //       const incomingText = messageData?.textMessageData?.textMessage \n      //       ? messageData?.textMessageData?.textMessage\n      //       : messageData?.extendedTextMessageData?.text;\n      //       const incomingTimestamp = body.timestamp;\n      //       if (typeWebhook !== 'incomingCall'){\n      //         if (!chats[incomingPhone]) createChat(incomingPhone, incomingChatId)\n      //         if (\n      //           messageData?.textMessageData?.textMessage\n      //           || messageData?.extendedTextMessageData?.text\n      //         ) createMessage(incomingPhone, {\n      //             messageId,\n      //             text: incomingText,\n      //             timestamp: incomingTimestamp,\n      //             type: 'incoming',\n      //           });\n      //         console.log('1 response', response)\n      //         deleteNotification(userId, userApiToken, undefined, response.receiptId)\n      //         .then(response => {\n      //           (receiveNotification(userId, userApiToken));\n      //         })}\n      //         if (\n      //         typeWebhook === 'incomingCall'\n      //         || !messageData?.textMessageData?.textMessage\n      //         || !messageData?.extendedTextMessageData?.text\n      //         ){\n      //           deleteNotification(userId, userApiToken, undefined, response.receiptId)\n      //         }\n      //     } \n      //      if (!response) receiveNotification(userId, userApiToken).then(response => {\n      //       console.log('one more response', response)\n      //      });\n      //   })\n      // }, [userId, userApiToken, chats]);\n    // console.log(\"chats\", chats)\n    \n  return (\n    <div className=\"home\">\n      <div className=\"home__chat-panel\">\n        <div className=\"home__chat-panel__header\">\n          <Input\n            placeholder=\"Введите 11 цифр номера телефона\"\n            value={phone}\n            onChange={handleChangePhone}\n            isErrorMessage={false}\n            onEnter={handleClickCreateChat}\n          />\n          <Button\n          text=\"OK\"\n          onClick={handleClickCreateChat}\n          disabled={!phone}\n          />\n        </div>\n        <ul className=\"home__chat-panel__chats\">\n          {Object.keys(chats).map((chat) => <li onClick={ handleClickCurrentChat} className=\"home__chat-panel__chat-card\" key={chat}> {chat} </li>)}\n         </ul>\n      </div>\n      <div className=\"home__conversation-panel\">\n        <div className=\"home__conversation-panel__message-wrapper\">\n          {currentChat?.messages\n          .sort((max, min) => parseInt(max.timestamp) - parseInt(min.timestamp))\n          .map((chat) => (\n            <MessageCard key={chat.timestamp} type={chat.type}>\n              {chat.text}\n            </MessageCard>\n          ))}\n        </div>\n        <div className=\"home__conversation-panel__input-fields\">\n          <Input\n            placeholder={!currentChat.phone ? \"Чтобы напечатать сообщение выберите чат\" : \"Введите текст сообщения\"}\n            onChange={handleChangeMessage}\n            value={message.text}\n            isErrorMessage={false}\n            onEnter={handleSendMessage}\n            disabled={!currentChat.phone}\n          />\n          <Button\n            text=\"Отправить\"\n            onClick={handleSendMessage}\n            disabled={!message.text}\n            />\n          </div>\n      </div>\n    </div>\n  );\n};"],"mappings":";;AAAA,OAAOA,KAAK,IACVC,WAAW,EACXC,SAAS,EACTC,QAAQ,QACH,OAAO;AACd,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AAEtD,SAASC,KAAK,QAAQ,qCAAqC;AAC3D,SAASC,MAAM,QAAQ,uCAAuC;AAC9D,SACEC,WAAW,EACXC,UAAU,EACVC,cAAc,EACdC,mBAAmB,QACd,0BAA0B;AACjC,SAASC,WAAW,QAAQ,iCAAiC;AAI7D,OAAO,aAAa;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEpB,MAAMC,eAAe,GAAG,OAAO;AAE/B,OAAO,MAAMC,IAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAElC,MAAMC,QAAQ,GAAGd,WAAW,CAAC,CAAC;EAC9B,MAAM;IAAEe;EAAO,CAAC,GAAGd,WAAW,CAAEe,KAAiB,IAAKA,KAAK,CAACC,IAAI,CAAC;EACjE,MAAM;IAAEC,KAAK;IAAEC;EAAY,CAAC,GAAGlB,WAAW,CAAEe,KAAiB,IAAKA,KAAK,CAACI,IAAI,CAAC;EAC7E,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGvB,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACwB,OAAO,EAAEC,UAAU,CAAC,GAAGzB,QAAQ,CAAW;IAAE0B,SAAS,EAAE,EAAE;IAAEC,IAAI,EAAE,EAAE;IAAEC,SAAS,EAAE,EAAE;IAAEC,IAAI,EAAEC;EAAU,CAAC,CAAC;EAE7G,MAAMC,iBAAiB,GAAGjC,WAAW,CAAC,CAACkC,CAAU,EAAEC,KAAa,KAAW;IACvEV,QAAQ,CAACU,KAAK,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,mBAAmB,GAAGpC,WAAW,CAAC,CAACkC,CAAU,EAAEC,KAAa,KAAW;IACzER,UAAU,CAAC;MAAC,GAAGD,OAAO;MAAEG,IAAI,EAAEM;IAAK,CAAC,CAAC;EACzC,CAAC,EAAE,CAACT,OAAO,CAAC,CAAC;;EAEb;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,MAAMW,qBAAqB,GAAGrC,WAAW,CAAC,MAAY;IAChD,IAAIc,eAAe,CAACwB,IAAI,CAACd,KAAK,CAAC,EAAE;MAC/B,IAAI,CAACH,KAAK,CAACG,KAAK,CAAC,EAAE;QACjBP,QAAQ,CAACT,UAAU,CAACgB,KAAK,CAAC,CAAC;QAC3BC,QAAQ,CAAC,EAAE,CAAC;MACd;IACF;EACF,CAAC,EAAE,CAACD,KAAK,EAAEP,QAAQ,EAAEI,KAAK,CAAC,CAAC;EAE5B,MAAMkB,sBAAsB,GAAGvC,WAAW,CAAEwC,KAAsC,IAAW;IAC3Fb,UAAU,CAAC;MAAEC,SAAS,EAAE,EAAE;MAAEC,IAAI,EAAE,EAAE;MAAEC,SAAS,EAAE,EAAE;MAAEC,IAAI,EAAEC;IAAU,CAAC,CAAC;IACvE,MAAMS,SAAS,GAAGD,KAAK,CAACE,MAAuB;IAC/C,MAAMC,aAAa,GAAGF,SAAS,CAACG,SAAS;IACzC3B,QAAQ,CAACR,cAAc,CAACY,KAAK,CAACsB,aAAa,CAAC,CAAC,CAAC;EAChD,CAAC,EAAE,CAACtB,KAAK,EAAEJ,QAAQ,CAAC,CAAC;EAErB,MAAM4B,iBAAiB,GAAG7C,WAAW,CAAC,MAAM;IAC1CiB,QAAQ,CAACV,WAAW,CAClBe,WAAW,CAACE,KAAK,EACjB;MAAC,GAAGE,OAAO;MAAEI,SAAS,EAAE,IAAIgB,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;MAAEjB,IAAI,EAAE;IAAU,CAAC,EAC1Eb,MACF,CAAC,CAAC;IACFS,UAAU,CAAC;MAAEC,SAAS,EAAE,EAAE;MAAEC,IAAI,EAAE,EAAE;MAAEC,SAAS,EAAE,EAAE;MAAEC,IAAI,EAAEC;IAAU,CAAC,CAAC;EACzE,CAAC,EAAE,CAACf,QAAQ,EAAEC,MAAM,EAAEQ,OAAO,EAAEJ,WAAW,CAAC,CAAC;EAE5CrB,SAAS,CAAC,MAAM;IACdgB,QAAQ,CAACP,mBAAmB,CAACQ,MAAM,CAAC,CAAC;EACvC,CAAC,EAAE,CAACD,QAAQ,EAAEC,MAAM,CAAC,CAAC;;EAGtB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACF;;EAEF,oBACEL,OAAA;IAAKoC,SAAS,EAAC,MAAM;IAAAC,QAAA,gBACnBrC,OAAA;MAAKoC,SAAS,EAAC,kBAAkB;MAAAC,QAAA,gBAC/BrC,OAAA;QAAKoC,SAAS,EAAC,0BAA0B;QAAAC,QAAA,gBACvCrC,OAAA,CAACR,KAAK;UACJ8C,WAAW,EAAC,8JAAiC;UAC7ChB,KAAK,EAAEX,KAAM;UACb4B,QAAQ,EAAEnB,iBAAkB;UAC5BoB,cAAc,EAAE,KAAM;UACtBC,OAAO,EAAEjB;QAAsB;UAAAkB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAChC,CAAC,eACF7C,OAAA,CAACP,MAAM;UACPuB,IAAI,EAAC,IAAI;UACT8B,OAAO,EAAEtB,qBAAsB;UAC/BuB,QAAQ,EAAE,CAACpC;QAAM;UAAA+B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAChB,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,eACN7C,OAAA;QAAIoC,SAAS,EAAC,yBAAyB;QAAAC,QAAA,EACpCW,MAAM,CAACC,IAAI,CAACzC,KAAK,CAAC,CAAC0C,GAAG,CAAExC,IAAI,iBAAKV,OAAA;UAAI8C,OAAO,EAAGpB,sBAAuB;UAACU,SAAS,EAAC,6BAA6B;UAAAC,QAAA,GAAY,GAAC,EAAC3B,IAAI,EAAC,GAAC;QAAA,GAAdA,IAAI;UAAAgC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAc,CAAC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACtI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eACN7C,OAAA;MAAKoC,SAAS,EAAC,0BAA0B;MAAAC,QAAA,gBACvCrC,OAAA;QAAKoC,SAAS,EAAC,2CAA2C;QAAAC,QAAA,EACvD5B,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAE0C,QAAQ,CACrBC,IAAI,CAAC,CAACC,GAAG,EAAEC,GAAG,KAAKC,QAAQ,CAACF,GAAG,CAACpC,SAAS,CAAC,GAAGsC,QAAQ,CAACD,GAAG,CAACrC,SAAS,CAAC,CAAC,CACrEiC,GAAG,CAAExC,IAAI,iBACRV,OAAA,CAACF,WAAW;UAAsBoB,IAAI,EAAER,IAAI,CAACQ,IAAK;UAAAmB,QAAA,EAC/C3B,IAAI,CAACM;QAAI,GADMN,IAAI,CAACO,SAAS;UAAAyB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAEnB,CACd;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,eACN7C,OAAA;QAAKoC,SAAS,EAAC,wCAAwC;QAAAC,QAAA,gBACrDrC,OAAA,CAACR,KAAK;UACJ8C,WAAW,EAAE,CAAC7B,WAAW,CAACE,KAAK,GAAG,yCAAyC,GAAG,yBAA0B;UACxG4B,QAAQ,EAAEhB,mBAAoB;UAC9BD,KAAK,EAAET,OAAO,CAACG,IAAK;UACpBwB,cAAc,EAAE,KAAM;UACtBC,OAAO,EAAET,iBAAkB;UAC3Be,QAAQ,EAAE,CAACtC,WAAW,CAACE;QAAM;UAAA+B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC9B,CAAC,eACF7C,OAAA,CAACP,MAAM;UACLuB,IAAI,EAAC,wDAAW;UAChB8B,OAAO,EAAEd,iBAAkB;UAC3Be,QAAQ,EAAE,CAAClC,OAAO,CAACG;QAAK;UAAA0B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACvB,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAC1C,EAAA,CA5KWD,IAAc;EAAA,QAERZ,WAAW,EACTC,WAAW,EACCA,WAAW;AAAA;AAAAiE,EAAA,GAJ/BtD,IAAc;AAAA,IAAAsD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}