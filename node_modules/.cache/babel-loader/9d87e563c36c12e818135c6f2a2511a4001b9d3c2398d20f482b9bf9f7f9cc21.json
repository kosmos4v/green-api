{"ast":null,"code":"import { handleActions } from \"redux-actions\";\nimport { ADD_NEW_CHAT, SET_CURRENT_CHAT, SEND_MESSAGE, SEND_MESSAGE_FAILURE, SEND_MESSAGE_PENDING, SEND_MESSAGE_SUCCESS, RECEIVE_NOTIFICATION_PANDING, RECEIVE_NOTIFICATION_SUCCESS, RECEIVE_NOTIFICATION_FAILURE } from \"../actions/chat\";\nconst initialState = {\n  chats: {},\n  currentChat: {\n    phone: '',\n    chatId: '',\n    messages: []\n  },\n  isSendMessagePending: false,\n  isReceiveNotificationPending: false,\n  notification: undefined,\n  sendMessageError: undefined\n};\nexport const chatReducer = handleActions({\n  [ADD_NEW_CHAT]: (state, _ref) => {\n    let {\n      payload\n    } = _ref;\n    const {\n      phone\n    } = payload;\n    const chats = {\n      ...state.chats,\n      [phone]: {\n        phone: phone,\n        chatId: phone + '@c.us',\n        messages: []\n      }\n    };\n    return {\n      ...state,\n      chats\n    };\n  },\n  [SET_CURRENT_CHAT]: (state, _ref2) => {\n    let {\n      payload\n    } = _ref2;\n    return {\n      ...state,\n      currentChat: payload.currentChat\n    };\n  },\n  [SEND_MESSAGE]: (state, _ref3) => {\n    let {\n      payload\n    } = _ref3;\n    const {\n      phone,\n      currentMessage\n    } = payload;\n    const updatedChat = {\n      ...state.currentChat,\n      messages: [...state.currentChat.messages, currentMessage]\n    };\n    return {\n      ...state,\n      currentChat: updatedChat,\n      chats: {\n        ...state.chats,\n        [phone]: updatedChat\n      }\n    };\n  },\n  [SEND_MESSAGE_PENDING]: (state, _ref4) => {\n    let {\n      payload\n    } = _ref4;\n    return {\n      ...state,\n      isSendMessagePending: payload.isSendMessagePending\n    };\n  },\n  [SEND_MESSAGE_SUCCESS]: (state, _ref5) => {\n    let {\n      payload\n    } = _ref5;\n    const {\n      incomingMessageId,\n      currentMessage,\n      phone\n    } = payload;\n    const updatedMessages = state.currentChat.messages.map(message => message.timestamp === currentMessage.timestamp ? {\n      ...message,\n      messageId: incomingMessageId\n    } : message);\n    const updatedChat = {\n      ...state.currentChat,\n      messages: updatedMessages\n    };\n    return {\n      ...state,\n      currentChat: updatedChat,\n      chats: {\n        ...state.chats,\n        [phone]: updatedChat\n      },\n      sendMessageError: undefined\n    };\n  },\n  [SEND_MESSAGE_FAILURE]: (state, _ref6) => {\n    let {\n      payload\n    } = _ref6;\n    return {\n      ...state,\n      sendMessageError: payload.error\n    };\n  },\n  [RECEIVE_NOTIFICATION_PANDING]: (state, _ref7) => {\n    let {\n      payload\n    } = _ref7;\n    return {\n      ...state,\n      isReceiveNotificationPending: payload.isReceiveNotificationPending\n    };\n  },\n  [RECEIVE_NOTIFICATION_SUCCESS]: (state, _ref8) => {\n    let {\n      payload\n    } = _ref8;\n    return {\n      ...state,\n      notification: payload.notification,\n      receiveNotificationError: undefined\n    };\n  },\n  [RECEIVE_NOTIFICATION_FAILURE]: (state, _ref9) => {\n    let {\n      payload\n    } = _ref9;\n    return {\n      ...state,\n      receiveNotificationError: payload.error,\n      notification: undefined\n    };\n  }\n}, initialState);\nexport default chatReducer;","map":{"version":3,"names":["handleActions","ADD_NEW_CHAT","SET_CURRENT_CHAT","SEND_MESSAGE","SEND_MESSAGE_FAILURE","SEND_MESSAGE_PENDING","SEND_MESSAGE_SUCCESS","RECEIVE_NOTIFICATION_PANDING","RECEIVE_NOTIFICATION_SUCCESS","RECEIVE_NOTIFICATION_FAILURE","initialState","chats","currentChat","phone","chatId","messages","isSendMessagePending","isReceiveNotificationPending","notification","undefined","sendMessageError","chatReducer","state","_ref","payload","_ref2","_ref3","currentMessage","updatedChat","_ref4","_ref5","incomingMessageId","updatedMessages","map","message","timestamp","messageId","_ref6","error","_ref7","_ref8","receiveNotificationError","_ref9"],"sources":["/Users/valeriykasmasov/projects/green-api-test/src/redux/reducers/chats.ts"],"sourcesContent":["import { handleActions } from \"redux-actions\";\nimport { TChat, TChats } from \"../../models/chat\";\nimport { TMessage } from \"../../models/message\";\nimport { TNotificationType } from \"../../models/notification\";\n\nimport {\n    ADD_NEW_CHAT,\n    SET_CURRENT_CHAT,\n    SEND_MESSAGE,\n    SEND_MESSAGE_FAILURE,\n    SEND_MESSAGE_PENDING,\n    SEND_MESSAGE_SUCCESS,\n    RECEIVE_NOTIFICATION_PANDING,\n    RECEIVE_NOTIFICATION_SUCCESS,\n    RECEIVE_NOTIFICATION_FAILURE,\n} from \"../actions/chat\";\n\nexport type TChatState = {\n  chats: TChats,\n  currentChat: TChat,\n  isSendMessagePending: boolean,\n  isReceiveNotificationPending: boolean,\n  notification?: TNotificationType\n  receiveNotificationError?: string,\n  sendMessageError?: string,\n};\n\nexport type TChatAction = {\n  chats: TChats,\n  userId: string,\n  currentChat: TChat,\n  currentMessage: TMessage,\n  error?: string,\n  isSendMessagePending: boolean,\n  isReceiveNotificationPending: boolean,\n  incomingMessageId: string,\n  // notification?: TNotificationType\n  phone: string,\n};\n\nconst initialState: TChatState = {\n  chats: {},\n  currentChat: { phone: '', chatId: '', messages:[] },\n  isSendMessagePending: false,\n  isReceiveNotificationPending: false,\n  notification: undefined,\n  sendMessageError: undefined,\n};\n\nexport const chatReducer = handleActions<TChatState, TChatAction>({\n\n[ADD_NEW_CHAT]: (state, { payload }) => { \n  const { phone } = payload\n  const chats = {\n    ...state.chats,\n    [phone]: { phone: phone, chatId: phone + '@c.us', messages: [] }\n  }\n  return ({\n    ...state,\n    chats,\n })\n},\n\n[SET_CURRENT_CHAT]: (state, { payload }) => ({\n  ...state,\n  currentChat: payload.currentChat,\n}),\n\n[SEND_MESSAGE]: (state, { payload }) => {\n  const { phone, currentMessage } = payload;\n  const updatedChat = {\n    ...state.currentChat,\n    messages: [...state.currentChat.messages, currentMessage]\n  };\n  return ({\n    ...state,\n    currentChat: updatedChat,\n    chats: {...state.chats, [phone]: updatedChat}\n  })\n},\n\n[SEND_MESSAGE_PENDING]: (state, { payload }) => ({\n  ...state,\n  isSendMessagePending: payload.isSendMessagePending,\n}),\n\n[SEND_MESSAGE_SUCCESS]: (state, { payload }) => {\n  const { incomingMessageId, currentMessage, phone } = payload;\n  const updatedMessages = state.currentChat.messages\n  .map((message) => message.timestamp === currentMessage.timestamp\n    ? {...message, messageId: incomingMessageId} \n    : message\n  );\n  const updatedChat = {\n    ...state.currentChat,\n    messages: updatedMessages,\n  };\n \n  return ({\n    ...state,\n    currentChat: updatedChat,\n    chats: {...state.chats, [phone]: updatedChat},\n    sendMessageError: undefined,\n  })\n},\n\n[SEND_MESSAGE_FAILURE]: (state, { payload }) => ({\n    ...state,\n    sendMessageError: payload.error,\n}),\n\n[RECEIVE_NOTIFICATION_PANDING]: (state, { payload }) => ({\n  ...state,\n  isReceiveNotificationPending: payload.isReceiveNotificationPending,\n}),\n\n[RECEIVE_NOTIFICATION_SUCCESS]: (state, { payload }) => ({\n  ...state,\n  notification: payload.notification,\n  receiveNotificationError: undefined,\n}),\n\n[RECEIVE_NOTIFICATION_FAILURE]: (state, { payload }) => ({\n  ...state,\n  receiveNotificationError: payload.error,\n  notification: undefined,\n}),\n\n}, initialState);\n\nexport default chatReducer;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}