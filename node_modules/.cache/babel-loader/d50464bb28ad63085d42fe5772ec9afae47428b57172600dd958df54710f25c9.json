{"ast":null,"code":"const BASE_URL = \"https://api.green-api.com\";\nexport function request(method, apiMethod, userId, body, receiptId) {\n  // any заменить на конкретную структуру данных ApiResponse для каждого промиса\n  const userApiToken = localStorage.getItem('userApiToken');\n  const url = `${BASE_URL}/waInstance${userId}/${apiMethod}/${userApiToken}`;\n  const headers = {\n    \"Content-Type\": \"application/json\",\n    \"Access-Control-Allow-Origin\": \"http://localhost:3000, http://localhost:3000/home\",\n    \"User-Agent\": \"PostmanRuntime/7.32.2\",\n    \"Connection\": \"keep-alive\",\n    \"Accept-Encoding\": \"gzip, deflate, br\",\n    \"Accept\": \"*/*\",\n    \"mode\": \"no-cors\"\n  };\n  return fetch(receiptId ? url + `/${receiptId}` : url, {\n    headers,\n    method,\n    mode: 'cors',\n    body: JSON.stringify(body)\n  });\n}\n;\n\n// export function receiveNotification(userId: string, userApiToken: string){\n//   return request('GET', userId, 'receiveNotification', userApiToken);\n// };\n\n// export function deleteNotification (userId: string, userApiToken: string, _: undefined, receiptId: number) {\n//   return request ('DELETE', userId, 'deleteNotification', userApiToken, _, receiptId);\n// }","map":{"version":3,"names":["BASE_URL","request","method","apiMethod","userId","body","receiptId","userApiToken","localStorage","getItem","url","headers","fetch","mode","JSON","stringify"],"sources":["/Users/valeriykasmasov/projects/green-api-test/src/utils/requests/request.ts"],"sourcesContent":["import { useSelector } from \"react-redux\";\nimport { TRootState } from \"../../redux/reducers\";\n\nconst BASE_URL = \"https://api.green-api.com\";\n\ntype TBody = Record<string, string>;\n\nexport function request (\n  method: string,\n  apiMethod: string,\n  userId: string,\n  body?: TBody,\n  receiptId?: number,\n  ): Promise<any> { // any заменить на конкретную структуру данных ApiResponse для каждого промиса\n    const userApiToken = localStorage.getItem('userApiToken');\n    \n    const url = `${BASE_URL}/waInstance${userId}/${apiMethod}/${userApiToken}`\n\n    const headers: Record<string, string> = {\n      \"Content-Type\": \"application/json\",\n      \"Access-Control-Allow-Origin\": \"http://localhost:3000, http://localhost:3000/home\",\n      \"User-Agent\": \"PostmanRuntime/7.32.2\",\n      \"Connection\": \"keep-alive\",\n      \"Accept-Encoding\": \"gzip, deflate, br\",\n      \"Accept\": \"*/*\",\n      \"mode\": \"no-cors\",\n    }\n    return fetch (\n      receiptId ? url + `/${receiptId}` : url,\n      {\n        headers,\n        method,\n        mode: 'cors',\n        body: JSON.stringify(body),\n      }\n    );\n  };\n\n\n// export function receiveNotification(userId: string, userApiToken: string){\n//   return request('GET', userId, 'receiveNotification', userApiToken);\n// };\n\n// export function deleteNotification (userId: string, userApiToken: string, _: undefined, receiptId: number) {\n//   return request ('DELETE', userId, 'deleteNotification', userApiToken, _, receiptId);\n// }"],"mappings":"AAGA,MAAMA,QAAQ,GAAG,2BAA2B;AAI5C,OAAO,SAASC,OAAOA,CACrBC,MAAc,EACdC,SAAiB,EACjBC,MAAc,EACdC,IAAY,EACZC,SAAkB,EACF;EAAE;EAChB,MAAMC,YAAY,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;EAEzD,MAAMC,GAAG,GAAI,GAAEV,QAAS,cAAaI,MAAO,IAAGD,SAAU,IAAGI,YAAa,EAAC;EAE1E,MAAMI,OAA+B,GAAG;IACtC,cAAc,EAAE,kBAAkB;IAClC,6BAA6B,EAAE,mDAAmD;IAClF,YAAY,EAAE,uBAAuB;IACrC,YAAY,EAAE,YAAY;IAC1B,iBAAiB,EAAE,mBAAmB;IACtC,QAAQ,EAAE,KAAK;IACf,MAAM,EAAE;EACV,CAAC;EACD,OAAOC,KAAK,CACVN,SAAS,GAAGI,GAAG,GAAI,IAAGJ,SAAU,EAAC,GAAGI,GAAG,EACvC;IACEC,OAAO;IACPT,MAAM;IACNW,IAAI,EAAE,MAAM;IACZR,IAAI,EAAES,IAAI,CAACC,SAAS,CAACV,IAAI;EAC3B,CACF,CAAC;AACH;AAAC;;AAGH;AACA;AACA;;AAEA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}