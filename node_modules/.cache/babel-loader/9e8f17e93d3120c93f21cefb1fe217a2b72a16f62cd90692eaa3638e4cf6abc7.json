{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useSelector } from \"react-redux\";\nconst BASE_URL = \"https://api.green-api.com\";\nexport function Request(method, apiMethod, body, receiptId) {\n  _s();\n  // any заменить на конкретную структуру данных ApiResponse для каждого промиса\n  const userApiToken = localStorage.getItem('userApiToken');\n  const {\n    userId\n  } = useSelector(state => state.user);\n  const url = `${BASE_URL}/waInstance${userId}/${apiMethod}/${userApiToken}`;\n  const headers = {\n    \"Content-Type\": \"application/json\",\n    \"Access-Control-Allow-Origin\": \"http://localhost:3000, http://localhost:3000/home\",\n    \"User-Agent\": \"PostmanRuntime/7.32.2\",\n    \"Connection\": \"keep-alive\",\n    \"Accept-Encoding\": \"gzip, deflate, br\",\n    \"Accept\": \"*/*\",\n    \"mode\": \"no-cors\"\n  };\n  // return fetch (\n  //   receiptId ? url + `/${receiptId}` : url,\n  //   {\n  //     headers,\n  //     method,\n  //     mode: 'cors',\n  //     body: JSON.stringify(body),\n  //   }\n  // );\n\n  try {\n    const response = fetch(receiptId ? url + `/${receiptId}` : url, {\n      headers,\n      method,\n      mode: 'cors',\n      body: JSON.stringify(body)\n    });\n    return response;\n  } catch (error) {\n    return console.error(`${apiMethod} response error: `, error);\n  }\n}\n_s(Request, \"XIHPHvUohkVyU+MTU6yUG2CM+9Q=\", false, function () {\n  return [useSelector];\n});\n_c = Request;\n;\n\n// export function receiveNotification(userId: string, userApiToken: string){\n//   return request('GET', userId, 'receiveNotification', userApiToken);\n// };\n\n// export function deleteNotification (userId: string, userApiToken: string, _: undefined, receiptId: number) {\n//   return request ('DELETE', userId, 'deleteNotification', userApiToken, _, receiptId);\n// }\nvar _c;\n$RefreshReg$(_c, \"Request\");","map":{"version":3,"names":["useSelector","BASE_URL","Request","method","apiMethod","body","receiptId","_s","userApiToken","localStorage","getItem","userId","state","user","url","headers","response","fetch","mode","JSON","stringify","error","console","_c","$RefreshReg$"],"sources":["/Users/valeriykasmasov/projects/green-api-test/src/utils/requests/request.ts"],"sourcesContent":["import { useSelector } from \"react-redux\";\nimport { TRootState } from \"../../redux/reducers\";\n\nconst BASE_URL = \"https://api.green-api.com\";\n\ntype TBody = Record<string, string>;\n\nexport function Request (\n  method: string,\n  apiMethod: string,\n  body?: TBody,\n  receiptId?: number,\n  ){ // any заменить на конкретную структуру данных ApiResponse для каждого промиса\n    const userApiToken = localStorage.getItem('userApiToken');\n    const { userId } = useSelector((state: TRootState) => state.user);\n    \n    const url = `${BASE_URL}/waInstance${userId}/${apiMethod}/${userApiToken}`\n\n    const headers: Record<string, string> = {\n      \"Content-Type\": \"application/json\",\n      \"Access-Control-Allow-Origin\": \"http://localhost:3000, http://localhost:3000/home\",\n      \"User-Agent\": \"PostmanRuntime/7.32.2\",\n      \"Connection\": \"keep-alive\",\n      \"Accept-Encoding\": \"gzip, deflate, br\",\n      \"Accept\": \"*/*\",\n      \"mode\": \"no-cors\",\n    }\n    // return fetch (\n    //   receiptId ? url + `/${receiptId}` : url,\n    //   {\n    //     headers,\n    //     method,\n    //     mode: 'cors',\n    //     body: JSON.stringify(body),\n    //   }\n    // );\n\n  try {\n    const response =  fetch(\n      receiptId ? url + `/${receiptId}` : url,\n      {\n        headers,\n        method,\n        mode: 'cors',\n        body: JSON.stringify(body),\n      }\n    );\n    return  response;\n  } catch (error) {\n    return console.error(`${apiMethod} response error: `, error);\n  }\n  };\n\n\n// export function receiveNotification(userId: string, userApiToken: string){\n//   return request('GET', userId, 'receiveNotification', userApiToken);\n// };\n\n// export function deleteNotification (userId: string, userApiToken: string, _: undefined, receiptId: number) {\n//   return request ('DELETE', userId, 'deleteNotification', userApiToken, _, receiptId);\n// }"],"mappings":";AAAA,SAASA,WAAW,QAAQ,aAAa;AAGzC,MAAMC,QAAQ,GAAG,2BAA2B;AAI5C,OAAO,SAASC,OAAOA,CACrBC,MAAc,EACdC,SAAiB,EACjBC,IAAY,EACZC,SAAkB,EACjB;EAAAC,EAAA;EAAE;EACD,MAAMC,YAAY,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;EACzD,MAAM;IAAEC;EAAO,CAAC,GAAGX,WAAW,CAAEY,KAAiB,IAAKA,KAAK,CAACC,IAAI,CAAC;EAEjE,MAAMC,GAAG,GAAI,GAAEb,QAAS,cAAaU,MAAO,IAAGP,SAAU,IAAGI,YAAa,EAAC;EAE1E,MAAMO,OAA+B,GAAG;IACtC,cAAc,EAAE,kBAAkB;IAClC,6BAA6B,EAAE,mDAAmD;IAClF,YAAY,EAAE,uBAAuB;IACrC,YAAY,EAAE,YAAY;IAC1B,iBAAiB,EAAE,mBAAmB;IACtC,QAAQ,EAAE,KAAK;IACf,MAAM,EAAE;EACV,CAAC;EACD;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEF,IAAI;IACF,MAAMC,QAAQ,GAAIC,KAAK,CACrBX,SAAS,GAAGQ,GAAG,GAAI,IAAGR,SAAU,EAAC,GAAGQ,GAAG,EACvC;MACEC,OAAO;MACPZ,MAAM;MACNe,IAAI,EAAE,MAAM;MACZb,IAAI,EAAEc,IAAI,CAACC,SAAS,CAACf,IAAI;IAC3B,CACF,CAAC;IACD,OAAQW,QAAQ;EAClB,CAAC,CAAC,OAAOK,KAAK,EAAE;IACd,OAAOC,OAAO,CAACD,KAAK,CAAE,GAAEjB,SAAU,mBAAkB,EAAEiB,KAAK,CAAC;EAC9D;AACA;AAACd,EAAA,CA5CaL,OAAO;EAAA,QAOAF,WAAW;AAAA;AAAAuB,EAAA,GAPlBrB,OAAO;AA4CpB;;AAGH;AACA;AACA;;AAEA;AACA;AACA;AAAA,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}