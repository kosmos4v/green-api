{"ast":null,"code":"import { call, delay, put } from 'typed-redux-saga';\nimport { takeEvery } from 'redux-saga/effects';\nimport { SEND_MESSAGE, sendMessagePending, sendMessageSuccess, sendMessageFailure, RECEIVE_NOTIFICATION, receiveNotificationPending, receiveNotificationFailure, receiveNotificationSuccess, DELETE_NOTIFICATION, deleteNotificationFailure, deleteNotificationPending, deleteNotificationSuccess } from '../actions/chat';\nimport { apiSendMessage, apiReceiveNotification, apiDeleteNotification } from '../../api';\nfunction sendMessage(_ref) {\n  let {\n    payload\n  } = _ref;\n  return function* () {\n    try {\n      yield put(sendMessagePending(true));\n      const {\n        idMessage\n      } = yield* call(apiSendMessage, payload.phone, payload.currentMessage, payload.userId);\n      if (idMessage) {\n        yield put(sendMessageSuccess(idMessage, payload.currentMessage, payload.phone));\n      }\n      ;\n    } catch (e) {\n      yield put(sendMessageFailure('Не удалось отправить сообщение'));\n    } finally {\n      yield put(sendMessagePending(false));\n    }\n  }();\n}\n;\nfunction receiveNotification(_ref2) {\n  let {\n    payload\n  } = _ref2;\n  return function* () {\n    while (true) {\n      try {\n        yield put(receiveNotificationPending(true));\n        const notification = yield* call(apiReceiveNotification, payload.userId);\n        if (notification) {\n          yield put(receiveNotificationSuccess(notification));\n          break;\n        } else delay(2000);\n      } catch (e) {\n        yield put(receiveNotificationFailure('Не удалось загрузить уведомление'));\n      } finally {\n        yield put(receiveNotificationPending(false));\n      }\n    }\n  }();\n}\n;\nfunction deleteNotification(_ref3) {\n  let {\n    payload\n  } = _ref3;\n  return function* () {\n    try {\n      yield put(deleteNotificationPending(true));\n      const isMessageDeleted = yield* call(apiDeleteNotification, payload.userId, payload.receiptId, payload._);\n      if (isMessageDeleted) yield put(deleteNotificationSuccess(isMessageDeleted.result));\n    } catch (e) {\n      yield put(deleteNotificationFailure('Не удалось удалить уведомление'));\n    } finally {\n      yield put(deleteNotificationPending(false));\n    }\n  }();\n}\n;\nexport default function* chatSaga() {\n  yield takeEvery(SEND_MESSAGE, sendMessage);\n  yield takeEvery(RECEIVE_NOTIFICATION, receiveNotification);\n  yield takeEvery(DELETE_NOTIFICATION, deleteNotification);\n}","map":{"version":3,"names":["call","delay","put","takeEvery","SEND_MESSAGE","sendMessagePending","sendMessageSuccess","sendMessageFailure","RECEIVE_NOTIFICATION","receiveNotificationPending","receiveNotificationFailure","receiveNotificationSuccess","DELETE_NOTIFICATION","deleteNotificationFailure","deleteNotificationPending","deleteNotificationSuccess","apiSendMessage","apiReceiveNotification","apiDeleteNotification","sendMessage","_ref","payload","idMessage","phone","currentMessage","userId","e","receiveNotification","_ref2","notification","deleteNotification","_ref3","isMessageDeleted","receiptId","_","result","chatSaga"],"sources":["/Users/valeriykasmasov/projects/green-api-test/src/redux/sagas/chat.ts"],"sourcesContent":["import { call, delay, put } from 'typed-redux-saga';\nimport { takeEvery } from 'redux-saga/effects';\nimport { Action } from 'redux-actions';\n\nimport {\n  SEND_MESSAGE,\n  sendMessagePending,\n  sendMessageSuccess,\n  sendMessageFailure,\n  RECEIVE_NOTIFICATION,\n  receiveNotificationPending,\n  receiveNotificationFailure,\n  receiveNotificationSuccess,\n  DELETE_NOTIFICATION,\n  deleteNotificationFailure,\n  deleteNotificationPending,\n  deleteNotificationSuccess,\n} from '../actions/chat';\nimport { TMessage } from '../../models/message';\nimport { apiSendMessage, apiReceiveNotification, apiDeleteNotification } from '../../api';\nimport { TNotificationType } from '../../models/notification';\n\nfunction* sendMessage({ payload }: Action<{ phone: string, currentMessage: TMessage, userId: string}>) {\n  try {\n    yield put(sendMessagePending(true));\n    const { idMessage } = yield* call(\n      apiSendMessage,\n      payload.phone,\n      payload.currentMessage,\n      payload.userId\n    );\n    if (idMessage) {\n        yield put(sendMessageSuccess(idMessage, payload.currentMessage, payload.phone))};\n  } catch (e) {\n      yield put(sendMessageFailure('Не удалось отправить сообщение'));\n  } finally {\n      yield put(sendMessagePending(false));\n  }\n};\n\nfunction* receiveNotification ({ payload }: Action<{ userId: string}>) {\n  while (true) {\n    try {\n      yield put(receiveNotificationPending(true));\n      const notification: TNotificationType | null = yield* call(apiReceiveNotification, payload.userId);\n      if (notification) {\n        yield put(receiveNotificationSuccess(notification));\n        break;\n      }\n      else delay(2000);\n    } catch (e) {\n      yield put(receiveNotificationFailure('Не удалось загрузить уведомление'));\n    } finally {\n      yield put(receiveNotificationPending(false));\n    }\n  }\n};\n\nfunction* deleteNotification ({ payload }: Action<{ userId: string, receiptId: number, _: undefined}>) {\n  try {\n    yield put(deleteNotificationPending(true));\n    const isMessageDeleted: {result: boolean} = yield* call(\n      apiDeleteNotification,\n      payload.userId,\n      payload.receiptId,\n      payload._\n    );\n    if (isMessageDeleted) yield put(deleteNotificationSuccess(isMessageDeleted.result))\n  } catch (e) {\n    yield put(deleteNotificationFailure('Не удалось удалить уведомление'));\n  } finally {\n    yield put (deleteNotificationPending(false));\n  }\n};\n\n\n\nexport default function* chatSaga () {\n    yield takeEvery(SEND_MESSAGE, sendMessage);\n    yield takeEvery(RECEIVE_NOTIFICATION, receiveNotification);\n    yield takeEvery(DELETE_NOTIFICATION, deleteNotification);\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}