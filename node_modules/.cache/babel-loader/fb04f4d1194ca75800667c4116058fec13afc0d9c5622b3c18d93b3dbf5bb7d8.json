{"ast":null,"code":"const BASE_URL = \"https://api.green-api.com\";\nconst userApiToken = localStorage.getItem('userApiToken');\nexport function request(method, userId, apiMethod, body, receiptId) {\n  // any заменить на конкретную структуру данных ApiResponse для каждого промиса\n\n  const url = `${BASE_URL}/waInstance${userId}/${apiMethod}/${userApiToken}`;\n  const headers = {\n    \"Content-Type\": \"application/json\",\n    \"Access-Control-Allow-Origin\": \"http://localhost:3000, http://localhost:3000/home\",\n    \"User-Agent\": \"PostmanRuntime/7.32.2\",\n    \"Connection\": \"keep-alive\",\n    \"Accept-Encoding\": \"gzip, deflate, br\",\n    \"Accept\": \"*/*\",\n    \"mode\": \"no-cors\"\n  };\n  return fetch(receiptId ? url + `/${receiptId}` : url, {\n    headers,\n    method,\n    mode: 'cors',\n    body: JSON.stringify(body)\n  });\n}\n\n// export function sendMessage(userId: string, userApiToken: string, body: TBody) {\n//   return request('POST', userId, 'sendMessage', userApiToken, body);\n// };\n\n// export function receiveNotification(userId: string, userApiToken: string){\n//   return request('GET', userId, 'receiveNotification', userApiToken);\n// };\n\n// export function deleteNotification (userId: string, userApiToken: string, _: undefined, receiptId: number) {\n//   return request ('DELETE', userId, 'deleteNotification', userApiToken, _, receiptId);\n// }","map":{"version":3,"names":["BASE_URL","userApiToken","localStorage","getItem","request","method","userId","apiMethod","body","receiptId","url","headers","fetch","mode","JSON","stringify"],"sources":["/Users/valeriykasmasov/projects/green-api-test/src/utils/requests/request.ts"],"sourcesContent":["const BASE_URL = \"https://api.green-api.com\";\nconst userApiToken = localStorage.getItem('userApiToken');\n\ntype TBody = Record<string, string>;\n\nexport function request (\n  method: string,\n  userId: string,\n  apiMethod: string,\n  body?: TBody | undefined,\n  receiptId?: number | undefined,\n  ):Promise<any> { // any заменить на конкретную структуру данных ApiResponse для каждого промиса\n    \n  const url = `${BASE_URL}/waInstance${userId}/${apiMethod}/${userApiToken}`\n\n  const headers: Record<string, string> = {\n    \"Content-Type\": \"application/json\",\n    \"Access-Control-Allow-Origin\": \"http://localhost:3000, http://localhost:3000/home\",\n    \"User-Agent\": \"PostmanRuntime/7.32.2\",\n    \"Connection\": \"keep-alive\",\n    \"Accept-Encoding\": \"gzip, deflate, br\",\n    \"Accept\": \"*/*\",\n    \"mode\": \"no-cors\",\n  }\n\n   return fetch(\n      receiptId ? url + `/${receiptId}` : url,\n      {\n        headers,\n        method,\n        mode: 'cors',\n        body: JSON.stringify(body),\n      }\n    );\n  \n  }\n\n\n// export function sendMessage(userId: string, userApiToken: string, body: TBody) {\n//   return request('POST', userId, 'sendMessage', userApiToken, body);\n// };\n\n// export function receiveNotification(userId: string, userApiToken: string){\n//   return request('GET', userId, 'receiveNotification', userApiToken);\n// };\n\n// export function deleteNotification (userId: string, userApiToken: string, _: undefined, receiptId: number) {\n//   return request ('DELETE', userId, 'deleteNotification', userApiToken, _, receiptId);\n// }"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,2BAA2B;AAC5C,MAAMC,YAAY,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;AAIzD,OAAO,SAASC,OAAOA,CACrBC,MAAc,EACdC,MAAc,EACdC,SAAiB,EACjBC,IAAwB,EACxBC,SAA8B,EACf;EAAE;;EAEjB,MAAMC,GAAG,GAAI,GAAEV,QAAS,cAAaM,MAAO,IAAGC,SAAU,IAAGN,YAAa,EAAC;EAE1E,MAAMU,OAA+B,GAAG;IACtC,cAAc,EAAE,kBAAkB;IAClC,6BAA6B,EAAE,mDAAmD;IAClF,YAAY,EAAE,uBAAuB;IACrC,YAAY,EAAE,YAAY;IAC1B,iBAAiB,EAAE,mBAAmB;IACtC,QAAQ,EAAE,KAAK;IACf,MAAM,EAAE;EACV,CAAC;EAEA,OAAOC,KAAK,CACTH,SAAS,GAAGC,GAAG,GAAI,IAAGD,SAAU,EAAC,GAAGC,GAAG,EACvC;IACEC,OAAO;IACPN,MAAM;IACNQ,IAAI,EAAE,MAAM;IACZL,IAAI,EAAEM,IAAI,CAACC,SAAS,CAACP,IAAI;EAC3B,CACF,CAAC;AAEH;;AAGF;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}