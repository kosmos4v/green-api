{"ast":null,"code":"import { handleActions } from \"redux-actions\";\nimport { ADD_NEW_CHAT, SET_CURRENT_CHAT, SEND_MESSAGE, SEND_MESSAGE_FAILURE, SEND_MESSAGE_PENDING, SEND_MESSAGE_SUCCESS, RECEIVE_NOTIFICATION_PENDING, RECEIVE_NOTIFICATION_SUCCESS, RECEIVE_NOTIFICATION_FAILURE, DELETE_NOTIFICATION_PENDING, DELETE_NOTIFICATION_SUCCESS, DELETE_NOTIFICATION_FAILURE } from \"../actions/chat\";\nconst initialState = {\n  chats: {},\n  currentChat: {\n    phone: '',\n    chatId: '',\n    messages: []\n  },\n  deleteNotificationError: undefined,\n  isDeleteNotificationPending: false,\n  isNotificationRendered: false,\n  isReceiveNotificationPending: false,\n  isSendMessagePending: false,\n  sendMessageError: undefined,\n  receiptId: undefined\n};\nexport const chatReducer = handleActions({\n  [ADD_NEW_CHAT]: (state, _ref) => {\n    let {\n      payload\n    } = _ref;\n    const {\n      phone\n    } = payload;\n    const chats = {\n      ...state.chats,\n      [phone]: {\n        phone: phone,\n        chatId: phone + '@c.us',\n        messages: []\n      }\n    };\n    return {\n      ...state,\n      chats\n    };\n  },\n  [SET_CURRENT_CHAT]: (state, _ref2) => {\n    let {\n      payload\n    } = _ref2;\n    return {\n      ...state,\n      currentChat: payload.currentChat\n    };\n  },\n  [SEND_MESSAGE]: (state, _ref3) => {\n    let {\n      payload\n    } = _ref3;\n    const {\n      phone,\n      currentMessage\n    } = payload;\n    const updatedChat = {\n      ...state.currentChat,\n      messages: [...state.currentChat.messages, currentMessage]\n    };\n    return {\n      ...state,\n      currentChat: updatedChat,\n      chats: {\n        ...state.chats,\n        [phone]: updatedChat\n      }\n    };\n  },\n  [SEND_MESSAGE_PENDING]: (state, _ref4) => {\n    let {\n      payload\n    } = _ref4;\n    return {\n      ...state,\n      isSendMessagePending: payload.isSendMessagePending\n    };\n  },\n  [SEND_MESSAGE_SUCCESS]: (state, _ref5) => {\n    let {\n      payload\n    } = _ref5;\n    const {\n      incomingMessageId,\n      currentMessage,\n      phone\n    } = payload;\n    const updatedMessages = state.currentChat.messages.map(message => message.timestamp === currentMessage.timestamp ? {\n      ...message,\n      messageId: incomingMessageId\n    } : message);\n    const updatedChat = {\n      ...state.currentChat,\n      messages: updatedMessages\n    };\n    return {\n      ...state,\n      currentChat: updatedChat,\n      chats: {\n        ...state.chats,\n        [phone]: updatedChat\n      },\n      sendMessageError: undefined\n    };\n  },\n  [SEND_MESSAGE_FAILURE]: (state, _ref6) => {\n    let {\n      payload\n    } = _ref6;\n    return {\n      ...state,\n      sendMessageError: payload.error\n    };\n  },\n  [RECEIVE_NOTIFICATION_PENDING]: (state, _ref7) => {\n    let {\n      payload\n    } = _ref7;\n    return {\n      ...state,\n      isReceiveNotificationPending: payload.isReceiveNotificationPending,\n      isNotificationRendered: false\n    };\n  },\n  [RECEIVE_NOTIFICATION_SUCCESS]: (state, _ref8) => {\n    let {\n      payload\n    } = _ref8;\n    if (payload.notification && payload.notification.body.messageData.typeMessage === 'textMessage') {\n      const chatId = payload.notification.body.senderData.chatId;\n      const phone = chatId === null || chatId === void 0 ? void 0 : chatId.replace('@c.us', '');\n      const newMessage = {\n        messageId: payload.notification.body.idMessage,\n        text: payload.notification.body.messageData.textMessageData.textMessage,\n        timestamp: payload.notification.body.timestamp.toString(),\n        type: 'incoming'\n      };\n      if (!state.chats[phone]) {\n        console.log('1');\n        return {\n          ...state,\n          chats: {\n            ...state.chats,\n            [phone]: {\n              phone,\n              chatId,\n              messages: [newMessage]\n            }\n          },\n          receiveNotificationError: undefined,\n          isNotificationRendered: true,\n          receiptId: payload.notification.receiptId\n        };\n      } else {\n        const updatedMessages = state.chats[phone].messages.map(message => message.timestamp !== newMessage.timestamp ? {\n          ...message,\n          newMessage\n        } : message);\n        const updatedChat = {\n          ...state.chats[phone],\n          messages: updatedMessages\n        };\n        return {\n          ...state,\n          chats: {\n            ...state.chats,\n            [phone]: updatedChat\n          },\n          receiveNotificationError: undefined,\n          isNotificationRendered: true,\n          receiptId: payload.notification.receiptId\n        };\n      }\n    } else {\n      console.log('payload не загрузился в RECEIVE_NOTIFICATION_SUCCESS');\n      return {\n        ...state,\n        isNotificationRendered: false\n      };\n    }\n    ;\n  },\n  [RECEIVE_NOTIFICATION_FAILURE]: (state, _ref9) => {\n    let {\n      payload\n    } = _ref9;\n    return {\n      ...state,\n      receiveNotificationError: payload.error\n    };\n  },\n  [DELETE_NOTIFICATION_PENDING]: (state, _ref10) => {\n    let {\n      payload\n    } = _ref10;\n    return {\n      ...state,\n      isDeleteNotificationPending: payload.isDeleteNotificationPending\n    };\n  },\n  [DELETE_NOTIFICATION_SUCCESS]: (state, _ref11) => {\n    let {\n      payload\n    } = _ref11;\n    return {\n      ...state,\n      receiptId: payload.receiptId\n    };\n  },\n  [DELETE_NOTIFICATION_FAILURE]: (state, _ref12) => {\n    let {\n      payload\n    } = _ref12;\n    return {\n      ...state,\n      deleteNotificationError: payload.error\n    };\n  }\n}, initialState);\nexport default chatReducer;","map":{"version":3,"names":["handleActions","ADD_NEW_CHAT","SET_CURRENT_CHAT","SEND_MESSAGE","SEND_MESSAGE_FAILURE","SEND_MESSAGE_PENDING","SEND_MESSAGE_SUCCESS","RECEIVE_NOTIFICATION_PENDING","RECEIVE_NOTIFICATION_SUCCESS","RECEIVE_NOTIFICATION_FAILURE","DELETE_NOTIFICATION_PENDING","DELETE_NOTIFICATION_SUCCESS","DELETE_NOTIFICATION_FAILURE","initialState","chats","currentChat","phone","chatId","messages","deleteNotificationError","undefined","isDeleteNotificationPending","isNotificationRendered","isReceiveNotificationPending","isSendMessagePending","sendMessageError","receiptId","chatReducer","state","_ref","payload","_ref2","_ref3","currentMessage","updatedChat","_ref4","_ref5","incomingMessageId","updatedMessages","map","message","timestamp","messageId","_ref6","error","_ref7","_ref8","notification","body","messageData","typeMessage","senderData","replace","newMessage","idMessage","text","textMessageData","textMessage","toString","type","console","log","receiveNotificationError","_ref9","_ref10","_ref11","_ref12"],"sources":["/Users/valeriykasmasov/projects/green-api-test/src/redux/reducers/chats.ts"],"sourcesContent":["import { handleActions } from \"redux-actions\";\nimport { TChat, TChats } from \"../../models/chat\";\nimport { TMessage } from \"../../models/message\";\nimport { TNotificationType } from \"../../models/notification\";\n\nimport {\n    ADD_NEW_CHAT,\n    SET_CURRENT_CHAT,\n    SEND_MESSAGE,\n    SEND_MESSAGE_FAILURE,\n    SEND_MESSAGE_PENDING,\n    SEND_MESSAGE_SUCCESS,\n    RECEIVE_NOTIFICATION_PENDING,\n    RECEIVE_NOTIFICATION_SUCCESS,\n    RECEIVE_NOTIFICATION_FAILURE,\n    DELETE_NOTIFICATION_PENDING,\n    DELETE_NOTIFICATION_SUCCESS,\n    DELETE_NOTIFICATION_FAILURE,\n} from \"../actions/chat\";\n\nexport type TChatState = {\n  chats: TChats,\n  currentChat: TChat,\n  deleteNotificationError?: string,\n  isDeleteNotificationPending: boolean,\n  isNotificationRendered: boolean,\n  isReceiveNotificationPending: boolean,\n  isSendMessagePending: boolean,\n  receiptId?: number,\n  receiveNotificationError?: string,\n  sendMessageError?: string,\n};\n\nexport type TChatAction = {\n  chats: TChats,\n  userId: string,\n  currentChat: TChat,\n  currentMessage: TMessage,\n  error?: string,\n  isDeleteNotificationPending: boolean,\n  isReceiveNotificationPending: boolean,\n  isSendMessagePending: boolean,\n  incomingMessageId: string,\n  notification: TNotificationType\n  phone: string,\n  receiptId?: number,\n};\n\nconst initialState: TChatState = {\n  chats: {},\n  currentChat: { phone: '', chatId: '', messages:[] },\n  deleteNotificationError: undefined,\n  isDeleteNotificationPending: false,\n  isNotificationRendered: false,\n  isReceiveNotificationPending: false,\n  isSendMessagePending: false,\n  sendMessageError: undefined,\n  receiptId: undefined,\n};\n\nexport const chatReducer = handleActions<TChatState, TChatAction>({\n\n[ADD_NEW_CHAT]: (state, { payload }) => { \n  const { phone } = payload\n  const chats = {\n    ...state.chats,\n    [phone]: { phone: phone, chatId: phone + '@c.us', messages: [] }\n  }\n  return ({\n    ...state,\n    chats,\n })\n},\n\n[SET_CURRENT_CHAT]: (state, { payload }) => ({\n  ...state,\n  currentChat: payload.currentChat,\n}),\n\n[SEND_MESSAGE]: (state, { payload }) => {\n  const { phone, currentMessage } = payload;\n  const updatedChat = {\n    ...state.currentChat,\n    messages: [...state.currentChat.messages, currentMessage]\n  };\n  return ({\n    ...state,\n    currentChat: updatedChat,\n    chats: {...state.chats, [phone]: updatedChat}\n  })\n},\n\n[SEND_MESSAGE_PENDING]: (state, { payload }) => ({\n  ...state,\n  isSendMessagePending: payload.isSendMessagePending,\n}),\n\n[SEND_MESSAGE_SUCCESS]: (state, { payload }) => {\n  const { incomingMessageId, currentMessage, phone } = payload;\n  const updatedMessages = state.currentChat.messages\n  .map((message) => message.timestamp === currentMessage.timestamp\n    ? {...message, messageId: incomingMessageId} \n    : message\n  );\n  const updatedChat = {\n    ...state.currentChat,\n    messages: updatedMessages,\n  };\n  return ({\n    ...state,\n    currentChat: updatedChat,\n    chats: {...state.chats, [phone]: updatedChat},\n    sendMessageError: undefined,\n  })\n},\n\n[SEND_MESSAGE_FAILURE]: (state, { payload }) => ({\n    ...state,\n    sendMessageError: payload.error,\n}),\n\n[RECEIVE_NOTIFICATION_PENDING]: (state, { payload }) => ({\n  ...state,\n  isReceiveNotificationPending: payload.isReceiveNotificationPending,\n  isNotificationRendered: false,\n}),\n\n[RECEIVE_NOTIFICATION_SUCCESS]: (state, { payload }) => {\n  if (\n    payload.notification\n    && payload.notification.body.messageData.typeMessage === 'textMessage'\n  ) {\n    const chatId = payload.notification.body.senderData.chatId;\n    const phone = chatId?.replace('@c.us', '');\n    const newMessage: TMessage = { \n      messageId: payload.notification.body.idMessage,\n      text: payload.notification.body.messageData.textMessageData.textMessage,\n      timestamp: payload.notification.body.timestamp.toString(),\n      type: 'incoming' };\n      if (!state.chats[phone]) {\n        console.log('1');\n        return ({\n          ...state,\n          chats: {\n            ...state.chats,\n            [phone]: { phone, chatId, messages: [newMessage] }\n          },\n          receiveNotificationError: undefined,\n          isNotificationRendered: true,\n          receiptId: payload.notification.receiptId,\n        })\n      } else {\n        const updatedMessages = state.chats[phone].messages\n        .map((message) => message.timestamp !== newMessage.timestamp\n        ? {...message, newMessage} \n        : message\n        );\n        const updatedChat = {\n          ...state.chats[phone],\n          messages: updatedMessages,\n        };\n        return ({\n          ...state,\n          chats: {...state.chats, [phone]: updatedChat},\n          receiveNotificationError: undefined,\n          isNotificationRendered: true,\n          receiptId: payload.notification.receiptId,\n       });}\n  } else {\n    console.log('payload не загрузился в RECEIVE_NOTIFICATION_SUCCESS')\n    return ({\n      ...state,\n      isNotificationRendered: false,\n    })\n  };\n},\n\n[RECEIVE_NOTIFICATION_FAILURE]: (state, { payload }) => ({\n  ...state,\n  receiveNotificationError: payload.error,\n}),\n\n[DELETE_NOTIFICATION_PENDING] : (state, {payload}) => ({\n  ...state,\n  isDeleteNotificationPending: payload.isDeleteNotificationPending,\n}),\n\n[DELETE_NOTIFICATION_SUCCESS]: (state, { payload }) => ({\n  ...state,\n  receiptId: payload.receiptId,\n}),\n\n[DELETE_NOTIFICATION_FAILURE]: (state, { payload }) => ({\n  ...state,\n  deleteNotificationError: payload.error,\n}),\n\n}, initialState);\n\nexport default chatReducer;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}