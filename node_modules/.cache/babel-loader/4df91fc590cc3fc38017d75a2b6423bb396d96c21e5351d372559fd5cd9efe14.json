{"ast":null,"code":"import { handleActions } from \"redux-actions\";\nimport { ADD_NEW_CHAT, SEND_MESSAGE, SEND_MESSAGE_FAILURE, SEND_MESSAGE_PENDING, SEND_MESSAGE_SUCCESS } from \"../actions/chat\";\nconst initialState = {\n  chats: {},\n  // currentChat: '',\n  currentMessage: {\n    messageId: '',\n    text: '',\n    timestamp: '',\n    type: 'outgoing'\n  },\n  isSendMessagePending: false,\n  incomingMessageId: '',\n  sendMessageError: undefined\n};\nexport const chatReduser = handleActions({\n  [ADD_NEW_CHAT]: (state, _ref) => {\n    let {\n      payload\n    } = _ref;\n    const chats = {\n      ...state.chats,\n      [payload.phone]: {\n        phone: payload.phone,\n        chatId: '',\n        messages: []\n      }\n    };\n    return {\n      ...state,\n      chats\n    };\n  },\n  [SEND_MESSAGE]: (state, _ref2) => {\n    let {\n      payload\n    } = _ref2;\n    return {\n      ...state,\n      currentMessage: payload.currentMessage\n    };\n  },\n  [SEND_MESSAGE_PENDING]: (state, _ref3) => {\n    let {\n      payload\n    } = _ref3;\n    return {\n      ...state,\n      isSendMessagePending: payload.isSendMessagePending\n    };\n  },\n  [SEND_MESSAGE_SUCCESS]: (state, _ref4) => {\n    let {\n      payload\n    } = _ref4;\n    return {\n      ...state,\n      incomingMessageId: payload.incomingMessageId,\n      sendMessageError: undefined\n    };\n  },\n  [SEND_MESSAGE_FAILURE]: (state, _ref5) => {\n    let {\n      payload\n    } = _ref5;\n    return {\n      ...state,\n      sendMessageError: payload.error\n    };\n  }\n}, initialState);\nexport default chatReduser;","map":{"version":3,"names":["handleActions","ADD_NEW_CHAT","SEND_MESSAGE","SEND_MESSAGE_FAILURE","SEND_MESSAGE_PENDING","SEND_MESSAGE_SUCCESS","initialState","chats","currentMessage","messageId","text","timestamp","type","isSendMessagePending","incomingMessageId","sendMessageError","undefined","chatReduser","state","_ref","payload","phone","chatId","messages","_ref2","_ref3","_ref4","_ref5","error"],"sources":["/Users/valeriykasmasov/projects/green-api-test/src/redux/reducers/chats.ts"],"sourcesContent":["import { handleActions } from \"redux-actions\";\nimport { TChats } from \"../../models/chat\";\nimport { TMessage } from \"../../models/message\";\n\nimport {\n    ADD_NEW_CHAT,\n    SEND_MESSAGE,\n    SEND_MESSAGE_FAILURE,\n    SEND_MESSAGE_PENDING,\n    SEND_MESSAGE_SUCCESS,\n} from \"../actions/chat\";\n\nexport type TChatState = {\n  chats: TChats,\n  // currentChat: string,\n  currentMessage: TMessage,\n  isSendMessagePending: boolean,\n  incomingMessageId: string,\n  sendMessageError?: string,\n};\n\nexport type TChatAction = {\n  chats: TChats,\n  currentMessage: TMessage,\n  isSendMessagePending: boolean,\n  incomingMessageId: string,\n  error?: string,\n  phone: string,\n};\n\nconst initialState: TChatState = {\n  chats: {},\n  // currentChat: '',\n  currentMessage: {\n    messageId: '',\n    text: '',\n    timestamp: '',\n    type: 'outgoing',\n  },\n  isSendMessagePending: false,\n  incomingMessageId: '',\n  sendMessageError: undefined,\n};\n\nexport const chatReduser = handleActions<TChatState, TChatAction>({\n\n[ADD_NEW_CHAT]: (state, { payload }) => { \n  const chats = {\n    ...state.chats,\n    [payload.phone]: {phone: payload.phone, chatId: '',messages: []}\n  }\n  return ({\n    ...state,\n    chats,\n })\n},\n\n[SEND_MESSAGE]: (state, { payload }) => ({\n  ...state,\n  currentMessage: payload.currentMessage,\n}),\n\n[SEND_MESSAGE_PENDING]: (state, { payload }) => ({\n  ...state,\n  isSendMessagePending: payload.isSendMessagePending,\n}),\n\n[SEND_MESSAGE_SUCCESS]: (state, { payload }) => ({\n  ...state,\n  incomingMessageId: payload.incomingMessageId,\n  sendMessageError: undefined,\n}),\n\n[SEND_MESSAGE_FAILURE]: (state, { payload }) => ({\n    ...state,\n    sendMessageError: payload.error,\n})\n}, initialState);\n\nexport default chatReduser;"],"mappings":"AAAA,SAASA,aAAa,QAAQ,eAAe;AAI7C,SACIC,YAAY,EACZC,YAAY,EACZC,oBAAoB,EACpBC,oBAAoB,EACpBC,oBAAoB,QACjB,iBAAiB;AAoBxB,MAAMC,YAAwB,GAAG;EAC/BC,KAAK,EAAE,CAAC,CAAC;EACT;EACAC,cAAc,EAAE;IACdC,SAAS,EAAE,EAAE;IACbC,IAAI,EAAE,EAAE;IACRC,SAAS,EAAE,EAAE;IACbC,IAAI,EAAE;EACR,CAAC;EACDC,oBAAoB,EAAE,KAAK;EAC3BC,iBAAiB,EAAE,EAAE;EACrBC,gBAAgB,EAAEC;AACpB,CAAC;AAED,OAAO,MAAMC,WAAW,GAAGjB,aAAa,CAA0B;EAElE,CAACC,YAAY,GAAG,CAACiB,KAAK,EAAAC,IAAA,KAAkB;IAAA,IAAhB;MAAEC;IAAQ,CAAC,GAAAD,IAAA;IACjC,MAAMZ,KAAK,GAAG;MACZ,GAAGW,KAAK,CAACX,KAAK;MACd,CAACa,OAAO,CAACC,KAAK,GAAG;QAACA,KAAK,EAAED,OAAO,CAACC,KAAK;QAAEC,MAAM,EAAE,EAAE;QAACC,QAAQ,EAAE;MAAE;IACjE,CAAC;IACD,OAAQ;MACN,GAAGL,KAAK;MACRX;IACH,CAAC;EACF,CAAC;EAED,CAACL,YAAY,GAAG,CAACgB,KAAK,EAAAM,KAAA;IAAA,IAAE;MAAEJ;IAAQ,CAAC,GAAAI,KAAA;IAAA,OAAM;MACvC,GAAGN,KAAK;MACRV,cAAc,EAAEY,OAAO,CAACZ;IAC1B,CAAC;EAAA,CAAC;EAEF,CAACJ,oBAAoB,GAAG,CAACc,KAAK,EAAAO,KAAA;IAAA,IAAE;MAAEL;IAAQ,CAAC,GAAAK,KAAA;IAAA,OAAM;MAC/C,GAAGP,KAAK;MACRL,oBAAoB,EAAEO,OAAO,CAACP;IAChC,CAAC;EAAA,CAAC;EAEF,CAACR,oBAAoB,GAAG,CAACa,KAAK,EAAAQ,KAAA;IAAA,IAAE;MAAEN;IAAQ,CAAC,GAAAM,KAAA;IAAA,OAAM;MAC/C,GAAGR,KAAK;MACRJ,iBAAiB,EAAEM,OAAO,CAACN,iBAAiB;MAC5CC,gBAAgB,EAAEC;IACpB,CAAC;EAAA,CAAC;EAEF,CAACb,oBAAoB,GAAG,CAACe,KAAK,EAAAS,KAAA;IAAA,IAAE;MAAEP;IAAQ,CAAC,GAAAO,KAAA;IAAA,OAAM;MAC7C,GAAGT,KAAK;MACRH,gBAAgB,EAAEK,OAAO,CAACQ;IAC9B,CAAC;EAAA;AACD,CAAC,EAAEtB,YAAY,CAAC;AAEhB,eAAeW,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}